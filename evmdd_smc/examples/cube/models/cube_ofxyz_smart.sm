// FILE: rubik.sm, SMART input file for Rubik's Cube
// Half-turns currently disabled because they were too slow
// Ben Smith, Nathan Diep
// CS 246  Fall 2008

// The n parameter is used when a limited number of moves are allowed
spn rub := {

	// Declare the places for the cube corners and orientations
	for (int Mark in {1..8}) {
		place Corner[Mark];
		place CornerOr[Mark];
	}

	// Declare places for cube edges and orientations
	for (int Mark in {1..12}) {
		place Edge[Mark];
		place EdgeOr[Mark];
		//partition(7:EdgeOr[Mark]);
	}
	
	// Partitions itemized for easy changing

	partition(9:Edge[9]);
	partition(8:Edge[2]);
	partition(7:Edge[3]);
	partition(8:Edge[10]);
	partition(9:Edge[6]);
	
	partition(7:Edge[4]);
	partition(7:Edge[1]);
	
	partition(10:Edge[5]);
	partition(11:Edge[8]);
	partition(12:Edge[7]);

	// MoveCount used when moved limited
	//place MoveCount;
	//partition(25:MoveCount);
	partition(1:Corner[5]);
	partition(1:Corner[8]);
	partition(6:CornerOr[8]);
	partition(6:CornerOr[5]);
	//partition(1:Edge[5]);
	//partition(1:Edge[7]);
	//partition(1:Edge[8]);
	partition(13:Edge[11]);
	partition(14:Edge[12]);

	
	partition(3:Corner[3]);
	partition(2:Corner[4]);
	partition(3:Corner[2]);
	partition(2:Corner[1]);
	partition(4:Corner[6]);
	partition(4:Corner[7]);
	
	
	partition(5:CornerOr[1]);
	partition(5:CornerOr[2]);
	partition(5:CornerOr[4]);
	partition(5:CornerOr[3]);
	
	partition(6:CornerOr[7]);
	partition(6:CornerOr[6]);
	
	partition(17:EdgeOr[9]);
	partition(16:EdgeOr[2]);
	partition(15:EdgeOr[3]);
	partition(16:EdgeOr[10]);
	partition(17:EdgeOr[6]);
	
	partition(15:EdgeOr[4]);
	partition(15:EdgeOr[1]);
	
	partition(18:EdgeOr[5]);
	partition(19:EdgeOr[8]);
	partition(20:EdgeOr[7]);
	partition(21:EdgeOr[11]);
	partition(22:EdgeOr[12]);
	
	// Initialize corner positions
	for (int Mark in {1..8}) {
		init(Corner[Mark]:Mark);
	}

	// Initialize edge positions
	for (int Mark in {1..12}) {
		init(Edge[Mark]:Mark);
	}

	// Declare transitions for quarter moves
	for (int Side in {1..6}) {
		// increase Twists to 1..3 to enable half-turns
		for(int Twist in {1..3}) {
			trans Move[Side][Twist];
			
			// counting arc for limited moves
			//arcs(Move[Side][Twist]:MoveCount);
			//guard(Move[Side][Twist]: tk(MoveCount) < n);
		}
	}
	
	
	// first move (front clockwise)
	arcs(Corner[1]:Move[1][1]:tk(Corner[1]));
	arcs(Move[1][1]:Corner[2]:tk(Corner[1]));
	arcs(Corner[2]:Move[1][1]:tk(Corner[2]));
	arcs(Move[1][1]:Corner[3]:tk(Corner[2]));
	arcs(Corner[3]:Move[1][1]:tk(Corner[3]));
	arcs(Move[1][1]:Corner[4]:tk(Corner[3]));
	arcs(Corner[4]:Move[1][1]:tk(Corner[4]));
	arcs(Move[1][1]:Corner[1]:tk(Corner[4]));

	arcs(Edge[1]:Move[1][1]:tk(Edge[1]));
	arcs(Move[1][1]:Edge[2]:tk(Edge[1]));
	arcs(Edge[2]:Move[1][1]:tk(Edge[2]));
	arcs(Move[1][1]:Edge[3]:tk(Edge[2]));
	arcs(Edge[3]:Move[1][1]:tk(Edge[3]));
	arcs(Move[1][1]:Edge[4]:tk(Edge[3]));
	arcs(Edge[4]:Move[1][1]:tk(Edge[4]));
	arcs(Move[1][1]:Edge[1]:tk(Edge[4]));
	
	arcs(CornerOr[1]:Move[1][1]:mod((tk(CornerOr[1]) + 0) , 3));
	arcs(Move[1][1]:CornerOr[2]:mod((tk(CornerOr[1]) + 2) , 3));
	arcs(CornerOr[2]:Move[1][1]:mod((tk(CornerOr[2]) + 0) , 3));
	arcs(Move[1][1]:CornerOr[3]:mod((tk(CornerOr[2]) + 2) , 3));
	arcs(CornerOr[3]:Move[1][1]:mod((tk(CornerOr[3]) + 0) , 3));
	arcs(Move[1][1]:CornerOr[4]:mod((tk(CornerOr[3]) + 1) , 3));
	arcs(CornerOr[4]:Move[1][1]:mod((tk(CornerOr[4]) + 0) , 3));
	arcs(Move[1][1]:CornerOr[1]:mod((tk(CornerOr[4]) + 1) , 3));
///*
	arcs(EdgeOr[1]:Move[1][1]:mod((tk(EdgeOr[1]) + 0) , 2));
	arcs(Move[1][1]:EdgeOr[2]:mod((tk(EdgeOr[1]) + 1) , 2));
	arcs(EdgeOr[2]:Move[1][1]:mod((tk(EdgeOr[2]) + 0) , 2));
	arcs(Move[1][1]:EdgeOr[3]:mod((tk(EdgeOr[2]) + 1) , 2));
	arcs(EdgeOr[3]:Move[1][1]:mod((tk(EdgeOr[3]) + 0) , 2));
	arcs(Move[1][1]:EdgeOr[4]:mod((tk(EdgeOr[3]) + 1) , 2));
	arcs(EdgeOr[4]:Move[1][1]:mod((tk(EdgeOr[4]) + 0) , 2));
	arcs(Move[1][1]:EdgeOr[1]:mod((tk(EdgeOr[4]) + 1) , 2));
//*/

	// first move (front counter-clockwise)
//	/*
        arcs(Corner[1]:Move[1][2]:tk(Corner[1]));
        arcs(Move[1][2]:Corner[4]:tk(Corner[1]));
        arcs(Corner[2]:Move[1][2]:tk(Corner[2]));
        arcs(Move[1][2]:Corner[1]:tk(Corner[2]));
        arcs(Corner[3]:Move[1][2]:tk(Corner[3]));
        arcs(Move[1][2]:Corner[2]:tk(Corner[3]));
        arcs(Corner[4]:Move[1][2]:tk(Corner[4]));
        arcs(Move[1][2]:Corner[3]:tk(Corner[4]));
     
        arcs(Edge[1]:Move[1][2]:tk(Edge[1]));
        arcs(Move[1][2]:Edge[4]:tk(Edge[1]));
        arcs(Edge[2]:Move[1][2]:tk(Edge[2]));
        arcs(Move[1][2]:Edge[1]:tk(Edge[2]));
        arcs(Edge[3]:Move[1][2]:tk(Edge[3]));
        arcs(Move[1][2]:Edge[2]:tk(Edge[3]));
        arcs(Edge[4]:Move[1][2]:tk(Edge[4]));
        arcs(Move[1][2]:Edge[3]:tk(Edge[4]));
	
	arcs(CornerOr[1]:Move[1][2]:mod((tk(CornerOr[1]) + 0) , 3));
	arcs(Move[1][2]:CornerOr[4]:mod((tk(CornerOr[1]) + 2) , 3));
	arcs(CornerOr[2]:Move[1][2]:mod((tk(CornerOr[2]) + 0) , 3));
	arcs(Move[1][2]:CornerOr[1]:mod((tk(CornerOr[2]) + 1) , 3));
	arcs(CornerOr[3]:Move[1][2]:mod((tk(CornerOr[3]) + 0) , 3));
	arcs(Move[1][2]:CornerOr[2]:mod((tk(CornerOr[3]) + 1) , 3));
	arcs(CornerOr[4]:Move[1][2]:mod((tk(CornerOr[4]) + 0) , 3));
	arcs(Move[1][2]:CornerOr[3]:mod((tk(CornerOr[4]) + 2) , 3));
///*
	arcs(EdgeOr[1]:Move[1][2]:mod((tk(EdgeOr[1]) + 0) , 2));
	arcs(Move[1][2]:EdgeOr[4]:mod((tk(EdgeOr[1]) + 1) , 2));
	arcs(EdgeOr[2]:Move[1][2]:mod((tk(EdgeOr[2]) + 0) , 2));
	arcs(Move[1][2]:EdgeOr[1]:mod((tk(EdgeOr[2]) + 1) , 2));
	arcs(EdgeOr[3]:Move[1][2]:mod((tk(EdgeOr[3]) + 0) , 2));
	arcs(Move[1][2]:EdgeOr[2]:mod((tk(EdgeOr[3]) + 1) , 2));
	arcs(EdgeOr[4]:Move[1][2]:mod((tk(EdgeOr[4]) + 0) , 2));
	arcs(Move[1][2]:EdgeOr[3]:mod((tk(EdgeOr[4]) + 1) , 2));
//	*/
///*
	// first move (front half)
        arcs(Corner[1]:Move[1][3]:tk(Corner[1]));
        arcs(Move[1][3]:Corner[3]:tk(Corner[1]));
        arcs(Corner[2]:Move[1][3]:tk(Corner[2]));
        arcs(Move[1][3]:Corner[4]:tk(Corner[2]));
        arcs(Corner[3]:Move[1][3]:tk(Corner[3]));
        arcs(Move[1][3]:Corner[1]:tk(Corner[3]));
        arcs(Corner[4]:Move[1][3]:tk(Corner[4]));
        arcs(Move[1][3]:Corner[2]:tk(Corner[4]));

	arcs(CornerOr[1]:Move[1][3]:mod((tk(CornerOr[1]) + 0) , 3));
	arcs(Move[1][3]:CornerOr[3]:mod((tk(CornerOr[1]) + 1) , 3));
	arcs(CornerOr[2]:Move[1][3]:mod((tk(CornerOr[2]) + 0) , 3));
	arcs(Move[1][3]:CornerOr[4]:mod((tk(CornerOr[2]) + 0) , 3));
	arcs(CornerOr[3]:Move[1][3]:mod((tk(CornerOr[3]) + 0) , 3));
	arcs(Move[1][3]:CornerOr[1]:mod((tk(CornerOr[3]) + 2) , 3));
	arcs(CornerOr[4]:Move[1][3]:mod((tk(CornerOr[4]) + 0) , 3));
	arcs(Move[1][3]:CornerOr[2]:mod((tk(CornerOr[4]) + 0) , 3));
	
	  arcs(Edge[1]:Move[1][3]:tk(Edge[1]));
        arcs(Move[1][3]:Edge[3]:tk(Edge[1]));
        arcs(Edge[2]:Move[1][3]:tk(Edge[2]));
        arcs(Move[1][3]:Edge[4]:tk(Edge[2]));
        arcs(Edge[3]:Move[1][3]:tk(Edge[3]));
        arcs(Move[1][3]:Edge[1]:tk(Edge[3]));
        arcs(Edge[4]:Move[1][3]:tk(Edge[4]));
        arcs(Move[1][3]:Edge[2]:tk(Edge[4]));
		
	arcs(EdgeOr[1]:Move[1][3]:mod((tk(EdgeOr[1]) + 0) , 2));
	arcs(Move[1][3]:EdgeOr[3]:mod((tk(EdgeOr[1]) + 0) , 2));
	arcs(EdgeOr[2]:Move[1][3]:mod((tk(EdgeOr[2]) + 0) , 2));
	arcs(Move[1][3]:EdgeOr[4]:mod((tk(EdgeOr[2]) + 0) , 2));
	arcs(EdgeOr[3]:Move[1][3]:mod((tk(EdgeOr[3]) + 0) , 2));
	arcs(Move[1][3]:EdgeOr[1]:mod((tk(EdgeOr[3]) + 0) , 2));
	arcs(EdgeOr[4]:Move[1][3]:mod((tk(EdgeOr[4]) + 0) , 2));
	arcs(Move[1][3]:EdgeOr[2]:mod((tk(EdgeOr[4]) + 0) , 2));
//*/

///*
	// back (clockwise)
	arcs(Corner[6]:Move[6][1]:tk(Corner[6]));
	arcs(Move[6][1]:Corner[5]:tk(Corner[6]));
	arcs(Corner[5]:Move[6][1]:tk(Corner[5]));
	arcs(Move[6][1]:Corner[8]:tk(Corner[5]));
	arcs(Corner[8]:Move[6][1]:tk(Corner[8]));
	arcs(Move[6][1]:Corner[7]:tk(Corner[8]));
	arcs(Corner[7]:Move[6][1]:tk(Corner[7]));
	arcs(Move[6][1]:Corner[6]:tk(Corner[7]));
	///*
	arcs(CornerOr[6]:Move[6][1]:mod((tk(CornerOr[6]) + 0) , 3));
	arcs(Move[6][1]:CornerOr[5]:mod((tk(CornerOr[6]) + 1) , 3));
	arcs(CornerOr[5]:Move[6][1]:mod((tk(CornerOr[5]) + 0) , 3));
	arcs(Move[6][1]:CornerOr[8]:mod((tk(CornerOr[5]) + 2) , 3));
	arcs(CornerOr[8]:Move[6][1]:mod((tk(CornerOr[8]) + 0) , 3));
	arcs(Move[6][1]:CornerOr[7]:mod((tk(CornerOr[8]) + 2) , 3));
	arcs(CornerOr[7]:Move[6][1]:mod((tk(CornerOr[7]) + 0) , 3));
	arcs(Move[6][1]:CornerOr[6]:mod((tk(CornerOr[7]) + 1) , 3));
	//*/
	arcs(Edge[6]:Move[6][1]:tk(Edge[6]));
	arcs(Move[6][1]:Edge[5]:tk(Edge[6]));
	arcs(Edge[5]:Move[6][1]:tk(Edge[5]));
	arcs(Move[6][1]:Edge[8]:tk(Edge[5]));
	arcs(Edge[8]:Move[6][1]:tk(Edge[8]));
	arcs(Move[6][1]:Edge[7]:tk(Edge[8]));
	arcs(Edge[7]:Move[6][1]:tk(Edge[7]));
	arcs(Move[6][1]:Edge[6]:tk(Edge[7]));
///*	
	arcs(EdgeOr[6]:Move[6][1]:mod((tk(EdgeOr[6]) + 0) , 2));
	arcs(Move[6][1]:EdgeOr[5]:mod((tk(EdgeOr[6]) + 1) , 2));
	arcs(EdgeOr[5]:Move[6][1]:mod((tk(EdgeOr[5]) + 0) , 2));
	arcs(Move[6][1]:EdgeOr[8]:mod((tk(EdgeOr[5]) + 1) , 2));
	arcs(EdgeOr[8]:Move[6][1]:mod((tk(EdgeOr[8]) + 0) , 2));
	arcs(Move[6][1]:EdgeOr[7]:mod((tk(EdgeOr[8]) + 1) , 2));
	arcs(EdgeOr[7]:Move[6][1]:mod((tk(EdgeOr[7]) + 0) , 2));
	arcs(Move[6][1]:EdgeOr[6]:mod((tk(EdgeOr[7]) + 1) , 2));
//*/
///*
	// back (counter-clockwise)
	arcs(Corner[6]:Move[6][2]:tk(Corner[6]));
	arcs(Move[6][2]:Corner[7]:tk(Corner[6]));
	arcs(Corner[5]:Move[6][2]:tk(Corner[5]));
	arcs(Move[6][2]:Corner[6]:tk(Corner[5]));
	arcs(Corner[8]:Move[6][2]:tk(Corner[8]));
	arcs(Move[6][2]:Corner[5]:tk(Corner[8]));
	arcs(Corner[7]:Move[6][2]:tk(Corner[7]));
	arcs(Move[6][2]:Corner[8]:tk(Corner[7]));
//	/*
	arcs(CornerOr[6]:Move[6][2]:mod((tk(CornerOr[6]) + 0) , 3));
	arcs(Move[6][2]:CornerOr[7]:mod((tk(CornerOr[6]) + 2) , 3));
	arcs(CornerOr[5]:Move[6][2]:mod((tk(CornerOr[5]) + 0) , 3));
	arcs(Move[6][2]:CornerOr[6]:mod((tk(CornerOr[5]) + 2) , 3));
	arcs(CornerOr[8]:Move[6][2]:mod((tk(CornerOr[8]) + 0) , 3));
	arcs(Move[6][2]:CornerOr[5]:mod((tk(CornerOr[8]) + 1) , 3));
	arcs(CornerOr[7]:Move[6][2]:mod((tk(CornerOr[7]) + 0) , 3));
	arcs(Move[6][2]:CornerOr[8]:mod((tk(CornerOr[7]) + 1) , 3));
//	
	arcs(Edge[6]:Move[6][2]:tk(Edge[6]));
	arcs(Move[6][2]:Edge[7]:tk(Edge[6]));
	arcs(Edge[5]:Move[6][2]:tk(Edge[5]));
	arcs(Move[6][2]:Edge[6]:tk(Edge[5]));
	arcs(Edge[8]:Move[6][2]:tk(Edge[8]));
	arcs(Move[6][2]:Edge[5]:tk(Edge[8]));
	arcs(Edge[7]:Move[6][2]:tk(Edge[7]));
	arcs(Move[6][2]:Edge[8]:tk(Edge[7]));
//	/*
	arcs(EdgeOr[6]:Move[6][2]:mod((tk(EdgeOr[6]) + 0) , 2));
	arcs(Move[6][2]:EdgeOr[7]:mod((tk(EdgeOr[6]) + 1) , 2));
	arcs(EdgeOr[5]:Move[6][2]:mod((tk(EdgeOr[5]) + 0) , 2));
	arcs(Move[6][2]:EdgeOr[6]:mod((tk(EdgeOr[5]) + 1) , 2));
	arcs(EdgeOr[8]:Move[6][2]:mod((tk(EdgeOr[8]) + 0) , 2));
	arcs(Move[6][2]:EdgeOr[5]:mod((tk(EdgeOr[8]) + 1) , 2));
	arcs(EdgeOr[7]:Move[6][2]:mod((tk(EdgeOr[7]) + 0) , 2));
	arcs(Move[6][2]:EdgeOr[8]:mod((tk(EdgeOr[7]) + 1) , 2));
//*/
///*
	// back (half)
	arcs(Corner[6]:Move[6][3]:tk(Corner[6]));
	arcs(Move[6][3]:Corner[8]:tk(Corner[6]));
	arcs(Corner[5]:Move[6][3]:tk(Corner[5]));
	arcs(Move[6][3]:Corner[7]:tk(Corner[5]));
	arcs(Corner[8]:Move[6][3]:tk(Corner[8]));
	arcs(Move[6][3]:Corner[6]:tk(Corner[8]));
	arcs(Corner[7]:Move[6][3]:tk(Corner[7]));
	arcs(Move[6][3]:Corner[5]:tk(Corner[7]));

	arcs(Edge[6]:Move[6][3]:tk(Edge[6]));
	arcs(Move[6][3]:Edge[8]:tk(Edge[6]));
	arcs(Edge[5]:Move[6][3]:tk(Edge[5]));
	arcs(Move[6][3]:Edge[7]:tk(Edge[5]));
	arcs(Edge[8]:Move[6][3]:tk(Edge[8]));
	arcs(Move[6][3]:Edge[6]:tk(Edge[8]));
	arcs(Edge[7]:Move[6][3]:tk(Edge[7]));
	arcs(Move[6][3]:Edge[5]:tk(Edge[7]));


//	/*
	arcs(CornerOr[6]:Move[6][3]:mod((tk(CornerOr[6]) + 0) , 3));
	arcs(Move[6][3]:CornerOr[8]:mod((tk(CornerOr[6]) + 0) , 3));
	arcs(CornerOr[5]:Move[6][3]:mod((tk(CornerOr[5]) + 0) , 3));
	arcs(Move[6][3]:CornerOr[7]:mod((tk(CornerOr[5]) + 1) , 3));
	arcs(CornerOr[8]:Move[6][3]:mod((tk(CornerOr[8]) + 0) , 3));
	arcs(Move[6][3]:CornerOr[6]:mod((tk(CornerOr[8]) + 0) , 3));
	arcs(CornerOr[7]:Move[6][3]:mod((tk(CornerOr[7]) + 0) , 3));
	arcs(Move[6][3]:CornerOr[5]:mod((tk(CornerOr[7]) + 2) , 3));
	
	arcs(EdgeOr[6]:Move[6][3]:mod((tk(EdgeOr[6]) + 0) , 2));
	arcs(Move[6][3]:EdgeOr[8]:mod((tk(EdgeOr[6]) + 0) , 2));
	arcs(EdgeOr[5]:Move[6][3]:mod((tk(EdgeOr[5]) + 0) , 2));
	arcs(Move[6][3]:EdgeOr[7]:mod((tk(EdgeOr[5]) + 0) , 2));
	arcs(EdgeOr[8]:Move[6][3]:mod((tk(EdgeOr[8]) + 0) , 2));
	arcs(Move[6][3]:EdgeOr[6]:mod((tk(EdgeOr[8]) + 0) , 2));
	arcs(EdgeOr[7]:Move[6][3]:mod((tk(EdgeOr[7]) + 0) , 2));
	arcs(Move[6][3]:EdgeOr[5]:mod((tk(EdgeOr[7]) + 0) , 2));
	
//*/


	// right (clockwise)
	arcs(Corner[2]:Move[3][1]:tk(Corner[2]));
	arcs(Move[3][1]:Corner[6]:tk(Corner[2]));
	arcs(Corner[6]:Move[3][1]:tk(Corner[6]));
	arcs(Move[3][1]:Corner[7]:tk(Corner[6]));
	arcs(Corner[7]:Move[3][1]:tk(Corner[7]));
	arcs(Move[3][1]:Corner[3]:tk(Corner[7]));
	arcs(Corner[3]:Move[3][1]:tk(Corner[3]));
	arcs(Move[3][1]:Corner[2]:tk(Corner[3]));

	arcs(CornerOr[2]:Move[3][1]:mod((tk(CornerOr[2]) + 0) , 3));
	arcs(Move[3][1]:CornerOr[6]:mod((tk(CornerOr[2]) + 2) , 3));
	arcs(CornerOr[6]:Move[3][1]:mod((tk(CornerOr[6]) + 0) , 3));
	arcs(Move[3][1]:CornerOr[7]:mod((tk(CornerOr[6]) + 1) , 3));
	arcs(CornerOr[7]:Move[3][1]:mod((tk(CornerOr[7]) + 0) , 3));
	arcs(Move[3][1]:CornerOr[3]:mod((tk(CornerOr[7]) + 1) , 3));
	arcs(CornerOr[3]:Move[3][1]:mod((tk(CornerOr[3]) + 0) , 3));
	arcs(Move[3][1]:CornerOr[2]:mod((tk(CornerOr[3]) + 2) , 3));
	
	arcs(Edge[2]:Move[3][1]:tk(Edge[2]));
	arcs(Move[3][1]:Edge[9]:tk(Edge[2]));
	arcs(Edge[9]:Move[3][1]:tk(Edge[9]));
	arcs(Move[3][1]:Edge[6]:tk(Edge[9]));
	arcs(Edge[6]:Move[3][1]:tk(Edge[6]));
	arcs(Move[3][1]:Edge[10]:tk(Edge[6]));
	arcs(Edge[10]:Move[3][1]:tk(Edge[10]));
	arcs(Move[3][1]:Edge[2]:tk(Edge[10]));
///*
	arcs(EdgeOr[2]:Move[3][1]:mod((tk(EdgeOr[2]) + 0) , 2));
	arcs(Move[3][1]:EdgeOr[9]:mod((tk(EdgeOr[2]) + 1) , 2));
	arcs(EdgeOr[9]:Move[3][1]:mod((tk(EdgeOr[9]) + 0) , 2));
	arcs(Move[3][1]:EdgeOr[6]:mod((tk(EdgeOr[9]) + 1) , 2));
	arcs(EdgeOr[6]:Move[3][1]:mod((tk(EdgeOr[6]) + 0) , 2));
	arcs(Move[3][1]:EdgeOr[10]:mod((tk(EdgeOr[6]) + 1) , 2));
	arcs(EdgeOr[10]:Move[3][1]:mod((tk(EdgeOr[10]) + 0) , 2));
	arcs(Move[3][1]:EdgeOr[2]:mod((tk(EdgeOr[10]) + 1) , 2));
//*/
	// right (counter-clockwise)
//	/*
	arcs(Corner[2]:Move[3][2]:tk(Corner[2]));
	arcs(Move[3][2]:Corner[3]:tk(Corner[2]));
	arcs(Corner[6]:Move[3][2]:tk(Corner[6]));
	arcs(Move[3][2]:Corner[2]:tk(Corner[6]));
	arcs(Corner[7]:Move[3][2]:tk(Corner[7]));
	arcs(Move[3][2]:Corner[6]:tk(Corner[7]));
	arcs(Corner[3]:Move[3][2]:tk(Corner[3]));
	arcs(Move[3][2]:Corner[7]:tk(Corner[3]));
	
	arcs(CornerOr[2]:Move[3][2]:mod((tk(CornerOr[2]) + 0) , 3));
	arcs(Move[3][2]:CornerOr[3]:mod((tk(CornerOr[2]) + 1) , 3));
	arcs(CornerOr[6]:Move[3][2]:mod((tk(CornerOr[6]) + 0) , 3));
	arcs(Move[3][2]:CornerOr[2]:mod((tk(CornerOr[6]) + 1) , 3));
	arcs(CornerOr[7]:Move[3][2]:mod((tk(CornerOr[7]) + 0) , 3));
	arcs(Move[3][2]:CornerOr[6]:mod((tk(CornerOr[7]) + 2) , 3));
	arcs(CornerOr[3]:Move[3][2]:mod((tk(CornerOr[3]) + 0) , 3));
	arcs(Move[3][2]:CornerOr[7]:mod((tk(CornerOr[3]) + 2) , 3));
	
	arcs(Edge[2]:Move[3][2]:tk(Edge[2]));
	arcs(Move[3][2]:Edge[10]:tk(Edge[2]));
	arcs(Edge[9]:Move[3][2]:tk(Edge[9]));
	arcs(Move[3][2]:Edge[2]:tk(Edge[9]));
	arcs(Edge[6]:Move[3][2]:tk(Edge[6]));
	arcs(Move[3][2]:Edge[9]:tk(Edge[6]));
	arcs(Edge[10]:Move[3][2]:tk(Edge[10]));
	arcs(Move[3][2]:Edge[6]:tk(Edge[10]));
	///*
	arcs(EdgeOr[2]:Move[3][2]:mod((tk(EdgeOr[2]) + 0) , 2));
	arcs(Move[3][2]:EdgeOr[10]:mod((tk(EdgeOr[2]) + 1) , 2));
	arcs(EdgeOr[9]:Move[3][2]:mod((tk(EdgeOr[9]) + 0) , 2));
	arcs(Move[3][2]:EdgeOr[2]:mod((tk(EdgeOr[9]) + 1) , 2));
	arcs(EdgeOr[6]:Move[3][2]:mod((tk(EdgeOr[6]) + 0) , 2));
	arcs(Move[3][2]:EdgeOr[9]:mod((tk(EdgeOr[6]) + 1) , 2));
	arcs(EdgeOr[10]:Move[3][2]:mod((tk(EdgeOr[10]) + 0) , 2));
	arcs(Move[3][2]:EdgeOr[6]:mod((tk(EdgeOr[10]) + 1) , 2));
	
//*/
///*
	// right (half)
	arcs(Corner[2]:Move[3][3]:tk(Corner[2]));
	arcs(Move[3][3]:Corner[7]:tk(Corner[2]));
	arcs(Corner[6]:Move[3][3]:tk(Corner[6]));
	arcs(Move[3][3]:Corner[3]:tk(Corner[6]));
	arcs(Corner[7]:Move[3][3]:tk(Corner[7]));
	arcs(Move[3][3]:Corner[2]:tk(Corner[7]));
	arcs(Corner[3]:Move[3][3]:tk(Corner[3]));
	arcs(Move[3][3]:Corner[6]:tk(Corner[3]));
	
	arcs(CornerOr[2]:Move[3][3]:mod((tk(CornerOr[2]) + 0) , 3));
	arcs(Move[3][3]:CornerOr[7]:mod((tk(CornerOr[2]) + 0) , 3));
	arcs(CornerOr[6]:Move[3][3]:mod((tk(CornerOr[6]) + 0) , 3));
	arcs(Move[3][3]:CornerOr[3]:mod((tk(CornerOr[6]) + 2) , 3));
	arcs(CornerOr[7]:Move[3][3]:mod((tk(CornerOr[7]) + 0) , 3));
	arcs(Move[3][3]:CornerOr[2]:mod((tk(CornerOr[7]) + 0) , 3));
	arcs(CornerOr[3]:Move[3][3]:mod((tk(CornerOr[3]) + 0) , 3));
	arcs(Move[3][3]:CornerOr[6]:mod((tk(CornerOr[3]) + 1) , 3));


	arcs(Edge[2]:Move[3][3]:tk(Edge[2]));
	arcs(Move[3][3]:Edge[6]:tk(Edge[2]));
	arcs(Edge[9]:Move[3][3]:tk(Edge[9]));
	arcs(Move[3][3]:Edge[10]:tk(Edge[9]));
	arcs(Edge[6]:Move[3][3]:tk(Edge[6]));
	arcs(Move[3][3]:Edge[2]:tk(Edge[6]));
	arcs(Edge[10]:Move[3][3]:tk(Edge[10]));
	arcs(Move[3][3]:Edge[9]:tk(Edge[10]));
	
	arcs(EdgeOr[2]:Move[3][3]:mod((tk(EdgeOr[2]) + 0) , 2));
	arcs(Move[3][3]:EdgeOr[6]:mod((tk(EdgeOr[2]) + 0) , 2));
	arcs(EdgeOr[9]:Move[3][3]:mod((tk(EdgeOr[9]) + 0) , 2));
	arcs(Move[3][3]:EdgeOr[10]:mod((tk(EdgeOr[9]) + 0) , 2));
	arcs(EdgeOr[6]:Move[3][3]:mod((tk(EdgeOr[6]) + 0) , 2));
	arcs(Move[3][3]:EdgeOr[2]:mod((tk(EdgeOr[6]) + 0) , 2));
	arcs(EdgeOr[10]:Move[3][3]:mod((tk(EdgeOr[10]) + 0) , 2));
	arcs(Move[3][3]:EdgeOr[9]:mod((tk(EdgeOr[10]) + 0) , 2));

//	*/
	
///*
	// left (clockwise)
	arcs(Corner[5]:Move[5][1]:tk(Corner[5]));
	arcs(Move[5][1]:Corner[1]:tk(Corner[5]));
	arcs(Corner[1]:Move[5][1]:tk(Corner[1]));
	arcs(Move[5][1]:Corner[4]:tk(Corner[1]));
	arcs(Corner[4]:Move[5][1]:tk(Corner[4]));
	arcs(Move[5][1]:Corner[8]:tk(Corner[4]));
	arcs(Corner[8]:Move[5][1]:tk(Corner[8]));
	arcs(Move[5][1]:Corner[5]:tk(Corner[8]));

	arcs(CornerOr[5]:Move[5][1]:mod((tk(CornerOr[5]) + 0) , 3));
	arcs(Move[5][1]:CornerOr[1]:mod((tk(CornerOr[5]) + 1) , 3));
	arcs(CornerOr[1]:Move[5][1]:mod((tk(CornerOr[1]) + 0) , 3));
	arcs(Move[5][1]:CornerOr[4]:mod((tk(CornerOr[1]) + 1) , 3));
	arcs(CornerOr[4]:Move[5][1]:mod((tk(CornerOr[4]) + 0) , 3));
	arcs(Move[5][1]:CornerOr[8]:mod((tk(CornerOr[4]) + 2) , 3));
	arcs(CornerOr[8]:Move[5][1]:mod((tk(CornerOr[8]) + 0) , 3));
	arcs(Move[5][1]:CornerOr[5]:mod((tk(CornerOr[8]) + 2) , 3));

	arcs(Edge[12]:Move[5][1]:tk(Edge[12]));
	arcs(Move[5][1]:Edge[4]:tk(Edge[12]));
	arcs(Edge[4]:Move[5][1]:tk(Edge[4]));
	arcs(Move[5][1]:Edge[11]:tk(Edge[4]));
	arcs(Edge[11]:Move[5][1]:tk(Edge[11]));
	arcs(Move[5][1]:Edge[8]:tk(Edge[11]));
	arcs(Edge[8]:Move[5][1]:tk(Edge[8]));
	arcs(Move[5][1]:Edge[12]:tk(Edge[8]));
///*
	arcs(EdgeOr[12]:Move[5][1]:mod((tk(EdgeOr[12]) + 0) , 2));
	arcs(Move[5][1]:EdgeOr[4]:mod((tk(EdgeOr[12]) + 1) , 2));
	arcs(EdgeOr[4]:Move[5][1]:mod((tk(EdgeOr[4]) + 0) , 2));
	arcs(Move[5][1]:EdgeOr[11]:mod((tk(EdgeOr[4]) + 1) , 2));
	arcs(EdgeOr[11]:Move[5][1]:mod((tk(EdgeOr[11]) + 0) , 2));
	arcs(Move[5][1]:EdgeOr[8]:mod((tk(EdgeOr[11]) + 1) , 2));
	arcs(EdgeOr[8]:Move[5][1]:mod((tk(EdgeOr[8]) + 0) , 2));
	arcs(Move[5][1]:EdgeOr[12]:mod((tk(EdgeOr[8]) + 1) , 2));
//*/
	// left (counter-clockwise)
//	/*
	arcs(Corner[5]:Move[5][2]:tk(Corner[5]));
	arcs(Move[5][2]:Corner[8]:tk(Corner[5]));
	arcs(Corner[1]:Move[5][2]:tk(Corner[1]));
	arcs(Move[5][2]:Corner[5]:tk(Corner[1]));
	arcs(Corner[4]:Move[5][2]:tk(Corner[4]));
	arcs(Move[5][2]:Corner[1]:tk(Corner[4]));
	arcs(Corner[8]:Move[5][2]:tk(Corner[8]));
	arcs(Move[5][2]:Corner[4]:tk(Corner[8]));

	arcs(CornerOr[5]:Move[5][2]:mod((tk(CornerOr[5]) + 0) , 3));
	arcs(Move[5][2]:CornerOr[8]:mod((tk(CornerOr[5]) + 1) , 3));
	arcs(CornerOr[1]:Move[5][2]:mod((tk(CornerOr[1]) + 0) , 3));
	arcs(Move[5][2]:CornerOr[5]:mod((tk(CornerOr[1]) + 2) , 3));
	arcs(CornerOr[4]:Move[5][2]:mod((tk(CornerOr[4]) + 0) , 3));
	arcs(Move[5][2]:CornerOr[1]:mod((tk(CornerOr[4]) + 2) , 3));
	arcs(CornerOr[8]:Move[5][2]:mod((tk(CornerOr[8]) + 0) , 3));
	arcs(Move[5][2]:CornerOr[4]:mod((tk(CornerOr[8]) + 1) , 3));

	arcs(Edge[12]:Move[5][2]:tk(Edge[12]));
	arcs(Move[5][2]:Edge[8]:tk(Edge[12]));
	arcs(Edge[4]:Move[5][2]:tk(Edge[4]));
	arcs(Move[5][2]:Edge[12]:tk(Edge[4]));
	arcs(Edge[11]:Move[5][2]:tk(Edge[11]));
	arcs(Move[5][2]:Edge[4]:tk(Edge[11]));
	arcs(Edge[8]:Move[5][2]:tk(Edge[8]));
	arcs(Move[5][2]:Edge[11]:tk(Edge[8]));
///*
	arcs(EdgeOr[12]:Move[5][2]:mod((tk(EdgeOr[12]) + 0) , 2));
	arcs(Move[5][2]:EdgeOr[8]:mod((tk(EdgeOr[12]) + 1) , 2));
	arcs(EdgeOr[4]:Move[5][2]:mod((tk(EdgeOr[4]) + 0) , 2));
	arcs(Move[5][2]:EdgeOr[12]:mod((tk(EdgeOr[4]) + 1) , 2));
	arcs(EdgeOr[11]:Move[5][2]:mod((tk(EdgeOr[11]) + 0) , 2));
	arcs(Move[5][2]:EdgeOr[4]:mod((tk(EdgeOr[11]) + 1) , 2));
	arcs(EdgeOr[8]:Move[5][2]:mod((tk(EdgeOr[8]) + 0) , 2));
	arcs(Move[5][2]:EdgeOr[11]:mod((tk(EdgeOr[8]) + 1) , 2));
//*/
///*
	// left (half)
	arcs(Corner[5]:Move[5][3]:tk(Corner[5]));
	arcs(Move[5][3]:Corner[4]:tk(Corner[5]));
	arcs(Corner[1]:Move[5][3]:tk(Corner[1]));
	arcs(Move[5][3]:Corner[8]:tk(Corner[1]));
	arcs(Corner[4]:Move[5][3]:tk(Corner[4]));
	arcs(Move[5][3]:Corner[5]:tk(Corner[4]));
	arcs(Corner[8]:Move[5][3]:tk(Corner[8]));
	arcs(Move[5][3]:Corner[1]:tk(Corner[8]));

	arcs(CornerOr[5]:Move[5][3]:mod((tk(CornerOr[5]) + 0) , 3));
	arcs(Move[5][3]:CornerOr[4]:mod((tk(CornerOr[5]) + 2) , 3));
	arcs(CornerOr[1]:Move[5][3]:mod((tk(CornerOr[1]) + 0) , 3));
	arcs(Move[5][3]:CornerOr[8]:mod((tk(CornerOr[1]) + 0) , 3));
	arcs(CornerOr[4]:Move[5][3]:mod((tk(CornerOr[4]) + 0) , 3));
	arcs(Move[5][3]:CornerOr[5]:mod((tk(CornerOr[4]) + 1) , 3));
	arcs(CornerOr[8]:Move[5][3]:mod((tk(CornerOr[8]) + 0) , 3));
	arcs(Move[5][3]:CornerOr[1]:mod((tk(CornerOr[8]) + 0) , 3));

	arcs(Edge[12]:Move[5][3]:tk(Edge[12]));
	arcs(Move[5][3]:Edge[11]:tk(Edge[12]));
	arcs(Edge[4]:Move[5][3]:tk(Edge[4]));
	arcs(Move[5][3]:Edge[8]:tk(Edge[4]));
	arcs(Edge[11]:Move[5][3]:tk(Edge[11]));
	arcs(Move[5][3]:Edge[12]:tk(Edge[11]));
	arcs(Edge[8]:Move[5][3]:tk(Edge[8]));
	arcs(Move[5][3]:Edge[4]:tk(Edge[8]));

	arcs(EdgeOr[12]:Move[5][3]:mod((tk(EdgeOr[12]) + 0) , 2));
	arcs(Move[5][3]:EdgeOr[11]:mod((tk(EdgeOr[12]) + 0) , 2));
	arcs(EdgeOr[4]:Move[5][3]:mod((tk(EdgeOr[4]) + 0) , 2));
	arcs(Move[5][3]:EdgeOr[8]:mod((tk(EdgeOr[4]) + 0) , 2));
	arcs(EdgeOr[11]:Move[5][3]:mod((tk(EdgeOr[11]) + 0) , 2));
	arcs(Move[5][3]:EdgeOr[12]:mod((tk(EdgeOr[11]) + 0) , 2));
	arcs(EdgeOr[8]:Move[5][3]:mod((tk(EdgeOr[8]) + 0) , 2));
	arcs(Move[5][3]:EdgeOr[4]:mod((tk(EdgeOr[8]) + 0) , 2));
//*/
///*
	// top (clockwise)
	arcs(Corner[2]:Move[2][1]:tk(Corner[2]));
	arcs(Move[2][1]:Corner[1]:tk(Corner[2]));
	arcs(Corner[1]:Move[2][1]:tk(Corner[1]));
	arcs(Move[2][1]:Corner[5]:tk(Corner[1]));
	arcs(Corner[5]:Move[2][1]:tk(Corner[5]));
	arcs(Move[2][1]:Corner[6]:tk(Corner[5]));
	arcs(Corner[6]:Move[2][1]:tk(Corner[6]));
	arcs(Move[2][1]:Corner[2]:tk(Corner[6]));

	arcs(CornerOr[2]:Move[2][1]:mod((tk(CornerOr[2]) + 0) , 3));
	arcs(Move[2][1]:CornerOr[1]:mod((tk(CornerOr[2]) + 2) , 3));
	arcs(CornerOr[1]:Move[2][1]:mod((tk(CornerOr[1]) + 0) , 3));
	arcs(Move[2][1]:CornerOr[5]:mod((tk(CornerOr[1]) + 1) , 3));
	arcs(CornerOr[5]:Move[2][1]:mod((tk(CornerOr[5]) + 0) , 3));
	arcs(Move[2][1]:CornerOr[6]:mod((tk(CornerOr[5]) + 1) , 3));
	arcs(CornerOr[6]:Move[2][1]:mod((tk(CornerOr[6]) + 0) , 3));
	arcs(Move[2][1]:CornerOr[2]:mod((tk(CornerOr[6]) + 2) , 3));
	
	arcs(Edge[1]:Move[2][1]:tk(Edge[1]));
	arcs(Move[2][1]:Edge[12]:tk(Edge[1]));
	arcs(Edge[12]:Move[2][1]:tk(Edge[12]));
	arcs(Move[2][1]:Edge[5]:tk(Edge[12]));
	arcs(Edge[5]:Move[2][1]:tk(Edge[5]));
	arcs(Move[2][1]:Edge[9]:tk(Edge[5]));
	arcs(Edge[9]:Move[2][1]:tk(Edge[9]));
	arcs(Move[2][1]:Edge[1]:tk(Edge[9]));
///*
	arcs(EdgeOr[1]:Move[2][1]:mod((tk(EdgeOr[1]) + 0) , 2));
	arcs(Move[2][1]:EdgeOr[12]:mod((tk(EdgeOr[1]) + 1) , 2));
	arcs(EdgeOr[12]:Move[2][1]:mod((tk(EdgeOr[12]) + 0) , 2));
	arcs(Move[2][1]:EdgeOr[5]:mod((tk(EdgeOr[12]) + 1) , 2));
	arcs(EdgeOr[5]:Move[2][1]:mod((tk(EdgeOr[5]) + 0) , 2));
	arcs(Move[2][1]:EdgeOr[9]:mod((tk(EdgeOr[5]) + 1) , 2));
	arcs(EdgeOr[9]:Move[2][1]:mod((tk(EdgeOr[9]) + 0) , 2));
	arcs(Move[2][1]:EdgeOr[1]:mod((tk(EdgeOr[9]) + 1) , 2));
//*/
	// top (counter-clockwise)
//	/*
	arcs(Corner[2]:Move[2][2]:tk(Corner[2]));
	arcs(Move[2][2]:Corner[6]:tk(Corner[2]));
	arcs(Corner[1]:Move[2][2]:tk(Corner[1]));
	arcs(Move[2][2]:Corner[2]:tk(Corner[1]));
	arcs(Corner[5]:Move[2][2]:tk(Corner[5]));
	arcs(Move[2][2]:Corner[1]:tk(Corner[5]));
	arcs(Corner[6]:Move[2][2]:tk(Corner[6]));
	arcs(Move[2][2]:Corner[5]:tk(Corner[6]));

	arcs(CornerOr[2]:Move[2][2]:mod((tk(CornerOr[2]) + 0) , 3));
	arcs(Move[2][2]:CornerOr[6]:mod((tk(CornerOr[2]) + 1) , 3));
	arcs(CornerOr[1]:Move[2][2]:mod((tk(CornerOr[1]) + 0) , 3));
	arcs(Move[2][2]:CornerOr[2]:mod((tk(CornerOr[1]) + 1) , 3));
	arcs(CornerOr[5]:Move[2][2]:mod((tk(CornerOr[5]) + 0) , 3));
	arcs(Move[2][2]:CornerOr[1]:mod((tk(CornerOr[5]) + 2) , 3));
	arcs(CornerOr[6]:Move[2][2]:mod((tk(CornerOr[6]) + 0) , 3));
	arcs(Move[2][2]:CornerOr[5]:mod((tk(CornerOr[6]) + 2) , 3));
	
	arcs(Edge[1]:Move[2][2]:tk(Edge[1]));
	arcs(Move[2][2]:Edge[9]:tk(Edge[1]));
	arcs(Edge[12]:Move[2][2]:tk(Edge[12]));
	arcs(Move[2][2]:Edge[1]:tk(Edge[12]));
	arcs(Edge[5]:Move[2][2]:tk(Edge[5]));
	arcs(Move[2][2]:Edge[12]:tk(Edge[5]));
	arcs(Edge[9]:Move[2][2]:tk(Edge[9]));
	arcs(Move[2][2]:Edge[5]:tk(Edge[9]));
///*
	arcs(EdgeOr[1]:Move[2][2]:mod((tk(EdgeOr[1]) + 0) , 2));
	arcs(Move[2][2]:EdgeOr[9]:mod((tk(EdgeOr[1]) + 1) , 2));
	arcs(EdgeOr[12]:Move[2][2]:mod((tk(EdgeOr[12]) + 0) , 2));
	arcs(Move[2][2]:EdgeOr[1]:mod((tk(EdgeOr[12]) + 1) , 2));
	arcs(EdgeOr[5]:Move[2][2]:mod((tk(EdgeOr[5]) + 0) , 2));
	arcs(Move[2][2]:EdgeOr[12]:mod((tk(EdgeOr[5]) + 1) , 2));
	arcs(EdgeOr[9]:Move[2][2]:mod((tk(EdgeOr[9]) + 0) , 2));
	arcs(Move[2][2]:EdgeOr[5]:mod((tk(EdgeOr[9]) + 1) , 2));
//*/
///*
	// top (half)
	arcs(Corner[2]:Move[2][3]:tk(Corner[2]));
	arcs(Move[2][3]:Corner[5]:tk(Corner[2]));
	arcs(Corner[1]:Move[2][3]:tk(Corner[1]));
	arcs(Move[2][3]:Corner[6]:tk(Corner[1]));
	arcs(Corner[5]:Move[2][3]:tk(Corner[5]));
	arcs(Move[2][3]:Corner[2]:tk(Corner[5]));
	arcs(Corner[6]:Move[2][3]:tk(Corner[6]));
	arcs(Move[2][3]:Corner[1]:tk(Corner[6]));
	
	arcs(CornerOr[2]:Move[2][3]:mod((tk(CornerOr[2]) + 0) , 3));
	arcs(Move[2][3]:CornerOr[5]:mod((tk(CornerOr[2]) + 0) , 3));
	arcs(CornerOr[1]:Move[2][3]:mod((tk(CornerOr[1]) + 0) , 3));
	arcs(Move[2][3]:CornerOr[6]:mod((tk(CornerOr[1]) + 2) , 3));
	arcs(CornerOr[5]:Move[2][3]:mod((tk(CornerOr[5]) + 0) , 3));
	arcs(Move[2][3]:CornerOr[2]:mod((tk(CornerOr[5]) + 0) , 3));
	arcs(CornerOr[6]:Move[2][3]:mod((tk(CornerOr[6]) + 0) , 3));
	arcs(Move[2][3]:CornerOr[1]:mod((tk(CornerOr[6]) + 1) , 3));

	arcs(Edge[1]:Move[2][3]:tk(Edge[1]));
	arcs(Move[2][3]:Edge[5]:tk(Edge[1]));
	arcs(Edge[12]:Move[2][3]:tk(Edge[12]));
	arcs(Move[2][3]:Edge[9]:tk(Edge[12]));
	arcs(Edge[5]:Move[2][3]:tk(Edge[5]));
	arcs(Move[2][3]:Edge[1]:tk(Edge[5]));
	arcs(Edge[9]:Move[2][3]:tk(Edge[9]));
	arcs(Move[2][3]:Edge[12]:tk(Edge[9]));
	
	arcs(EdgeOr[1]:Move[2][3]:mod((tk(EdgeOr[1]) + 0) , 2));
	arcs(Move[2][3]:EdgeOr[5]:mod((tk(EdgeOr[1]) + 0) , 2));
	arcs(EdgeOr[12]:Move[2][3]:mod((tk(EdgeOr[12]) + 0) , 2));
	arcs(Move[2][3]:EdgeOr[9]:mod((tk(EdgeOr[12]) + 0) , 2));
	arcs(EdgeOr[5]:Move[2][3]:mod((tk(EdgeOr[5]) + 0) , 2));
	arcs(Move[2][3]:EdgeOr[1]:mod((tk(EdgeOr[5]) + 0) , 2));
	arcs(EdgeOr[9]:Move[2][3]:mod((tk(EdgeOr[9]) + 0) , 2));
	arcs(Move[2][3]:EdgeOr[12]:mod((tk(EdgeOr[9]) + 0) , 2));

//*/	
///*
	// bottom (clockwise)
	arcs(Corner[3]:Move[4][1]:tk(Corner[3]));
	arcs(Move[4][1]:Corner[7]:tk(Corner[3]));
	arcs(Corner[7]:Move[4][1]:tk(Corner[7]));
	arcs(Move[4][1]:Corner[8]:tk(Corner[7]));
	arcs(Corner[8]:Move[4][1]:tk(Corner[8]));
	arcs(Move[4][1]:Corner[4]:tk(Corner[8]));
	arcs(Corner[4]:Move[4][1]:tk(Corner[4]));
	arcs(Move[4][1]:Corner[3]:tk(Corner[4]));
	
	arcs(CornerOr[3]:Move[4][1]:mod((tk(CornerOr[3]) + 0) , 3));
	arcs(Move[4][1]:CornerOr[7]:mod((tk(CornerOr[3]) + 1) , 3));
	arcs(CornerOr[7]:Move[4][1]:mod((tk(CornerOr[7]) + 0) , 3));
	arcs(Move[4][1]:CornerOr[8]:mod((tk(CornerOr[7]) + 2) , 3));
	arcs(CornerOr[8]:Move[4][1]:mod((tk(CornerOr[8]) + 0) , 3));
	arcs(Move[4][1]:CornerOr[4]:mod((tk(CornerOr[8]) + 2) , 3));
	arcs(CornerOr[4]:Move[4][1]:mod((tk(CornerOr[4]) + 0) , 3));
	arcs(Move[4][1]:CornerOr[3]:mod((tk(CornerOr[4]) + 1) , 3));
	
	arcs(Edge[3]:Move[4][1]:tk(Edge[3]));
	arcs(Move[4][1]:Edge[10]:tk(Edge[3]));
	arcs(Edge[10]:Move[4][1]:tk(Edge[10]));
	arcs(Move[4][1]:Edge[7]:tk(Edge[10]));
	arcs(Edge[7]:Move[4][1]:tk(Edge[7]));
	arcs(Move[4][1]:Edge[11]:tk(Edge[7]));
	arcs(Edge[11]:Move[4][1]:tk(Edge[11]));
	arcs(Move[4][1]:Edge[3]:tk(Edge[11]));
//	/*
	arcs(EdgeOr[3]:Move[4][1]:mod((tk(EdgeOr[3]) + 0) , 2));
	arcs(Move[4][1]:EdgeOr[10]:mod((tk(EdgeOr[3]) + 1) , 2));
	arcs(EdgeOr[10]:Move[4][1]:mod((tk(EdgeOr[10]) + 0) , 2));
	arcs(Move[4][1]:EdgeOr[7]:mod((tk(EdgeOr[10]) + 1) , 2));
	arcs(EdgeOr[7]:Move[4][1]:mod((tk(EdgeOr[7]) + 0) , 2));
	arcs(Move[4][1]:EdgeOr[11]:mod((tk(EdgeOr[7]) + 1) , 2));
	arcs(EdgeOr[11]:Move[4][1]:mod((tk(EdgeOr[11]) + 0) , 2));
	arcs(Move[4][1]:EdgeOr[3]:mod((tk(EdgeOr[11]) + 1) , 2));
//*/
	// bottom (counter-clockwise)
//	/*
	arcs(Corner[3]:Move[4][2]:tk(Corner[3]));
	arcs(Move[4][2]:Corner[4]:tk(Corner[3]));
	arcs(Corner[7]:Move[4][2]:tk(Corner[7]));
	arcs(Move[4][2]:Corner[3]:tk(Corner[7]));
	arcs(Corner[8]:Move[4][2]:tk(Corner[8]));
	arcs(Move[4][2]:Corner[7]:tk(Corner[8]));
	arcs(Corner[4]:Move[4][2]:tk(Corner[4]));
	arcs(Move[4][2]:Corner[8]:tk(Corner[4]));
	
	arcs(CornerOr[3]:Move[4][2]:mod((tk(CornerOr[3]) + 0) , 3));
	arcs(Move[4][2]:CornerOr[4]:mod((tk(CornerOr[3]) + 2) , 3));
	arcs(CornerOr[7]:Move[4][2]:mod((tk(CornerOr[7]) + 0) , 3));
	arcs(Move[4][2]:CornerOr[3]:mod((tk(CornerOr[7]) + 2) , 3));
	arcs(CornerOr[8]:Move[4][2]:mod((tk(CornerOr[8]) + 0) , 3));
	arcs(Move[4][2]:CornerOr[7]:mod((tk(CornerOr[8]) + 1) , 3));
	arcs(CornerOr[4]:Move[4][2]:mod((tk(CornerOr[4]) + 0) , 3));
	arcs(Move[4][2]:CornerOr[8]:mod((tk(CornerOr[4]) + 1) , 3));

	arcs(Edge[3]:Move[4][2]:tk(Edge[3]));
	arcs(Move[4][2]:Edge[11]:tk(Edge[3]));
	arcs(Edge[10]:Move[4][2]:tk(Edge[10]));
	arcs(Move[4][2]:Edge[3]:tk(Edge[10]));
	arcs(Edge[7]:Move[4][2]:tk(Edge[7]));
	arcs(Move[4][2]:Edge[10]:tk(Edge[7]));
	arcs(Edge[11]:Move[4][2]:tk(Edge[11]));
	arcs(Move[4][2]:Edge[7]:tk(Edge[11]));
	///*
	arcs(EdgeOr[3]:Move[4][2]:mod((tk(EdgeOr[3]) + 0) , 2));
	arcs(Move[4][2]:EdgeOr[11]:mod((tk(EdgeOr[3]) + 1) , 2));
	arcs(EdgeOr[10]:Move[4][2]:mod((tk(EdgeOr[10]) + 0) , 2));
	arcs(Move[4][2]:EdgeOr[3]:mod((tk(EdgeOr[10]) + 1) , 2));
	arcs(EdgeOr[7]:Move[4][2]:mod((tk(EdgeOr[7]) + 0) , 2));
	arcs(Move[4][2]:EdgeOr[10]:mod((tk(EdgeOr[7]) + 1) , 2));
	arcs(EdgeOr[11]:Move[4][2]:mod((tk(EdgeOr[11]) + 0) , 2));
	arcs(Move[4][2]:EdgeOr[7]:mod((tk(EdgeOr[11]) + 1) , 2));
//*/
///*
	// bottom (half)
	arcs(Corner[3]:Move[4][3]:tk(Corner[3]));
	arcs(Move[4][3]:Corner[8]:tk(Corner[3]));
	arcs(Corner[7]:Move[4][3]:tk(Corner[7]));
	arcs(Move[4][3]:Corner[4]:tk(Corner[7]));
	arcs(Corner[8]:Move[4][3]:tk(Corner[8]));
	arcs(Move[4][3]:Corner[3]:tk(Corner[8]));
	arcs(Corner[4]:Move[4][3]:tk(Corner[4]));
	arcs(Move[4][3]:Corner[7]:tk(Corner[4]));
	
	arcs(CornerOr[3]:Move[4][3]:mod((tk(CornerOr[3]) + 0) , 3));
	arcs(Move[4][3]:CornerOr[8]:mod((tk(CornerOr[3]) + 0) , 3));
	arcs(CornerOr[7]:Move[4][3]:mod((tk(CornerOr[7]) + 0) , 3));
	arcs(Move[4][3]:CornerOr[4]:mod((tk(CornerOr[7]) + 1) , 3));
	arcs(CornerOr[8]:Move[4][3]:mod((tk(CornerOr[8]) + 0) , 3));
	arcs(Move[4][3]:CornerOr[3]:mod((tk(CornerOr[8]) + 0) , 3));
	arcs(CornerOr[4]:Move[4][3]:mod((tk(CornerOr[4]) + 0) , 3));
	arcs(Move[4][3]:CornerOr[7]:mod((tk(CornerOr[4]) + 2) , 3));

	arcs(Edge[3]:Move[4][3]:tk(Edge[3]));
	arcs(Move[4][3]:Edge[7]:tk(Edge[3]));
	arcs(Edge[10]:Move[4][3]:tk(Edge[10]));
	arcs(Move[4][3]:Edge[11]:tk(Edge[10]));
	arcs(Edge[7]:Move[4][3]:tk(Edge[7]));
	arcs(Move[4][3]:Edge[3]:tk(Edge[7]));
	arcs(Edge[11]:Move[4][3]:tk(Edge[11]));
	arcs(Move[4][3]:Edge[10]:tk(Edge[11]));
	
	arcs(EdgeOr[3]:Move[4][3]:mod((tk(EdgeOr[3]) + 0) , 2));
	arcs(Move[4][3]:EdgeOr[7]:mod((tk(EdgeOr[3]) + 0) , 2));
	arcs(EdgeOr[10]:Move[4][3]:mod((tk(EdgeOr[10]) + 0) , 2));
	arcs(Move[4][3]:EdgeOr[11]:mod((tk(EdgeOr[10]) + 0) , 2));
	arcs(EdgeOr[7]:Move[4][3]:mod((tk(EdgeOr[7]) + 0) , 2));
	arcs(Move[4][3]:EdgeOr[3]:mod((tk(EdgeOr[7]) + 0) , 2));
	arcs(EdgeOr[11]:Move[4][3]:mod((tk(EdgeOr[11]) + 0) , 2));
	arcs(Move[4][3]:EdgeOr[10]:mod((tk(EdgeOr[11]) + 0) , 2));
//*/
	// count states
	bigint numstates := num_states(false);
	
	// Code for an attempt at limiting the number of moves
	/*
	for (int MVC in {0..n}) {
		//mdd Final[MVC] := cond(MVC > 0, addnext_mdd(Final[MVC - 1]),initialstate_mdd);
		mdd Final[MVC] := cond(MVC > 0, union_mdd(Final[MVC - 1], EXbar_mdd(Final[MVC - 1])),
					mdd_initialstate);
	}
	*/
	//bigint ns := card_mdd(Final[n]);
};

# MDDUnionStrategy MDD_FI_EXT
# StateStorage MDD_SATURATION_TRANSITION
# Verbose true
# Report true
//# Dump_MDD true
# MDDL_MemBound 30000
//# MDDL_CacheMemBound 2000
//# MDDL_UTMemBound 1000
# MDDL_CleanUp_Threshold 400000

//int N := read_int(" 'number of moves'");

print("The number of rubiks states is: ",rub.numstates,"\n");
//print("The number of rubiks states could be: ",rub(N).ns,"\n");
