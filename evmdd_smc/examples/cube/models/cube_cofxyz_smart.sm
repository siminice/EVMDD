// FILE: rubik.sm, SMART input file for rubik
// CS 246  Fall 2008

spn rub := {
	for (int Mark in {1..8}) {
		place Corner[Mark];
		place CornerOr[Mark];
	}

	partition(1:Corner[3]);

	partition(2:Corner[4]);

	partition(3:Corner[2]);

	partition(4:Corner[1]);

	partition(5:Corner[6]);

	partition(6:Corner[5]);

	partition(7:Corner[7]);

	partition(8:Corner[8]);

	partition(9:CornerOr[1]);
	partition(9:CornerOr[2]);
	partition(9:CornerOr[4]);
	partition(9:CornerOr[3]);

	partition(10:CornerOr[8]);

	partition(11:CornerOr[7]);

	partition(12:CornerOr[6]);

	partition(13:CornerOr[5]);

	for (int Mark in {1..8}) {
		init(Corner[Mark]:Mark);
	}

	for (int Side in {1..6}) {
		for(int Twist in {1..2}) {
			trans Move[Side][Twist];
		}
	}
	
	// first move (front clockwise)
	arcs(Corner[1]:Move[1][1]:tk(Corner[1]));
	arcs(Move[1][1]:Corner[2]:tk(Corner[1]));
	arcs(Corner[2]:Move[1][1]:tk(Corner[2]));
	arcs(Move[1][1]:Corner[3]:tk(Corner[2]));
	arcs(Corner[3]:Move[1][1]:tk(Corner[3]));
	arcs(Move[1][1]:Corner[4]:tk(Corner[3]));
	arcs(Corner[4]:Move[1][1]:tk(Corner[4]));
	arcs(Move[1][1]:Corner[1]:tk(Corner[4]));
	arcs(CornerOr[1]:Move[1][1]:mod((tk(CornerOr[1]) + 0) , 3));
	arcs(Move[1][1]:CornerOr[2]:mod((tk(CornerOr[1]) + 2) , 3));
	arcs(CornerOr[2]:Move[1][1]:mod((tk(CornerOr[2]) + 0) , 3));
	arcs(Move[1][1]:CornerOr[3]:mod((tk(CornerOr[2]) + 2) , 3));
	arcs(CornerOr[3]:Move[1][1]:mod((tk(CornerOr[3]) + 0) , 3));
	arcs(Move[1][1]:CornerOr[4]:mod((tk(CornerOr[3]) + 1) , 3));
	arcs(CornerOr[4]:Move[1][1]:mod((tk(CornerOr[4]) + 0) , 3));
	arcs(Move[1][1]:CornerOr[1]:mod((tk(CornerOr[4]) + 1) , 3));

	// first move (front counter-clockwise)
        arcs(Corner[1]:Move[1][2]:tk(Corner[1]));
        arcs(Move[1][2]:Corner[4]:tk(Corner[1]));
        arcs(Corner[2]:Move[1][2]:tk(Corner[2]));
        arcs(Move[1][2]:Corner[1]:tk(Corner[2]));
        arcs(Corner[3]:Move[1][2]:tk(Corner[3]));
        arcs(Move[1][2]:Corner[2]:tk(Corner[3]));
        arcs(Corner[4]:Move[1][2]:tk(Corner[4]));
        arcs(Move[1][2]:Corner[3]:tk(Corner[4]));
	arcs(CornerOr[1]:Move[1][2]:mod((tk(CornerOr[1]) + 0) , 3));
	arcs(Move[1][2]:CornerOr[4]:mod((tk(CornerOr[1]) + 2) , 3));
	arcs(CornerOr[2]:Move[1][2]:mod((tk(CornerOr[2]) + 0) , 3));
	arcs(Move[1][2]:CornerOr[1]:mod((tk(CornerOr[2]) + 1) , 3));
	arcs(CornerOr[3]:Move[1][2]:mod((tk(CornerOr[3]) + 0) , 3));
	arcs(Move[1][2]:CornerOr[2]:mod((tk(CornerOr[3]) + 1) , 3));
	arcs(CornerOr[4]:Move[1][2]:mod((tk(CornerOr[4]) + 0) , 3));
	arcs(Move[1][2]:CornerOr[3]:mod((tk(CornerOr[4]) + 2) , 3));

	// first move (front half)
        arcs(Corner[1]:Move[1][3]:tk(Corner[1]));
        arcs(Move[1][3]:Corner[3]:tk(Corner[1]));
        arcs(Corner[2]:Move[1][3]:tk(Corner[2]));
        arcs(Move[1][3]:Corner[4]:tk(Corner[2]));
        arcs(Corner[3]:Move[1][3]:tk(Corner[3]));
        arcs(Move[1][3]:Corner[1]:tk(Corner[3]));
        arcs(Corner[4]:Move[1][3]:tk(Corner[4]));
        arcs(Move[1][3]:Corner[2]:tk(Corner[4]));
	arcs(CornerOr[1]:Move[1][3]:mod((tk(CornerOr[1]) + 0) , 3));
	arcs(Move[1][3]:CornerOr[3]:mod((tk(CornerOr[1]) + 1) , 3));
	arcs(CornerOr[2]:Move[1][3]:mod((tk(CornerOr[2]) + 0) , 3));
	arcs(Move[1][3]:CornerOr[4]:mod((tk(CornerOr[2]) + 0) , 3));
	arcs(CornerOr[3]:Move[1][3]:mod((tk(CornerOr[3]) + 0) , 3));
	arcs(Move[1][3]:CornerOr[1]:mod((tk(CornerOr[3]) + 2) , 3));
	arcs(CornerOr[4]:Move[1][3]:mod((tk(CornerOr[4]) + 0) , 3));
	arcs(Move[1][3]:CornerOr[2]:mod((tk(CornerOr[4]) + 0) , 3));

	// back clockwise)
	arcs(Corner[6]:Move[6][1]:tk(Corner[6]));
	arcs(Move[6][1]:Corner[5]:tk(Corner[6]));
	arcs(Corner[5]:Move[6][1]:tk(Corner[5]));
	arcs(Move[6][1]:Corner[8]:tk(Corner[5]));
	arcs(Corner[8]:Move[6][1]:tk(Corner[8]));
	arcs(Move[6][1]:Corner[7]:tk(Corner[8]));
	arcs(Corner[7]:Move[6][1]:tk(Corner[7]));
	arcs(Move[6][1]:Corner[6]:tk(Corner[7]));
	arcs(CornerOr[6]:Move[6][1]:mod((tk(CornerOr[6]) + 0) , 3));
	arcs(Move[6][1]:CornerOr[5]:mod((tk(CornerOr[6]) + 1) , 3));
	arcs(CornerOr[5]:Move[6][1]:mod((tk(CornerOr[5]) + 0) , 3));
	arcs(Move[6][1]:CornerOr[8]:mod((tk(CornerOr[5]) + 2) , 3));
	arcs(CornerOr[8]:Move[6][1]:mod((tk(CornerOr[8]) + 0) , 3));
	arcs(Move[6][1]:CornerOr[7]:mod((tk(CornerOr[8]) + 2) , 3));
	arcs(CornerOr[7]:Move[6][1]:mod((tk(CornerOr[7]) + 0) , 3));
	arcs(Move[6][1]:CornerOr[6]:mod((tk(CornerOr[7]) + 1) , 3));

	// back counter-clockwise)
	arcs(Corner[6]:Move[6][2]:tk(Corner[6]));
	arcs(Move[6][2]:Corner[7]:tk(Corner[6]));
	arcs(Corner[5]:Move[6][2]:tk(Corner[5]));
	arcs(Move[6][2]:Corner[6]:tk(Corner[5]));
	arcs(Corner[8]:Move[6][2]:tk(Corner[8]));
	arcs(Move[6][2]:Corner[5]:tk(Corner[8]));
	arcs(Corner[7]:Move[6][2]:tk(Corner[7]));
	arcs(Move[6][2]:Corner[8]:tk(Corner[7]));
	arcs(CornerOr[6]:Move[6][2]:mod((tk(CornerOr[6]) + 0) , 3));
	arcs(Move[6][2]:CornerOr[7]:mod((tk(CornerOr[6]) + 2) , 3));
	arcs(CornerOr[5]:Move[6][2]:mod((tk(CornerOr[5]) + 0) , 3));
	arcs(Move[6][2]:CornerOr[6]:mod((tk(CornerOr[5]) + 2) , 3));
	arcs(CornerOr[8]:Move[6][2]:mod((tk(CornerOr[8]) + 0) , 3));
	arcs(Move[6][2]:CornerOr[5]:mod((tk(CornerOr[8]) + 1) , 3));
	arcs(CornerOr[7]:Move[6][2]:mod((tk(CornerOr[7]) + 0) , 3));
	arcs(Move[6][2]:CornerOr[8]:mod((tk(CornerOr[7]) + 1) , 3));

	// back half)
	arcs(Corner[6]:Move[6][3]:tk(Corner[6]));
	arcs(Move[6][3]:Corner[8]:tk(Corner[6]));
	arcs(Corner[5]:Move[6][3]:tk(Corner[5]));
	arcs(Move[6][3]:Corner[7]:tk(Corner[5]));
	arcs(Corner[8]:Move[6][3]:tk(Corner[8]));
	arcs(Move[6][3]:Corner[6]:tk(Corner[8]));
	arcs(Corner[7]:Move[6][3]:tk(Corner[7]));
	arcs(Move[6][3]:Corner[5]:tk(Corner[7]));
	arcs(CornerOr[6]:Move[6][3]:mod((tk(CornerOr[6]) + 0) , 3));
	arcs(Move[6][3]:CornerOr[8]:mod((tk(CornerOr[6]) + 0) , 3));
	arcs(CornerOr[5]:Move[6][3]:mod((tk(CornerOr[5]) + 0) , 3));
	arcs(Move[6][3]:CornerOr[7]:mod((tk(CornerOr[5]) + 1) , 3));
	arcs(CornerOr[8]:Move[6][3]:mod((tk(CornerOr[8]) + 0) , 3));
	arcs(Move[6][3]:CornerOr[6]:mod((tk(CornerOr[8]) + 0) , 3));
	arcs(CornerOr[7]:Move[6][3]:mod((tk(CornerOr[7]) + 0) , 3));
	arcs(Move[6][3]:CornerOr[5]:mod((tk(CornerOr[7]) + 2) , 3));

	// right clockwise)
	arcs(Corner[2]:Move[3][1]:tk(Corner[2]));
	arcs(Move[3][1]:Corner[6]:tk(Corner[2]));
	arcs(Corner[6]:Move[3][1]:tk(Corner[6]));
	arcs(Move[3][1]:Corner[7]:tk(Corner[6]));
	arcs(Corner[7]:Move[3][1]:tk(Corner[7]));
	arcs(Move[3][1]:Corner[3]:tk(Corner[7]));
	arcs(Corner[3]:Move[3][1]:tk(Corner[3]));
	arcs(Move[3][1]:Corner[2]:tk(Corner[3]));
	arcs(CornerOr[2]:Move[3][1]:mod((tk(CornerOr[2]) + 0) , 3));
	arcs(Move[3][1]:CornerOr[6]:mod((tk(CornerOr[2]) + 2) , 3));
	arcs(CornerOr[6]:Move[3][1]:mod((tk(CornerOr[6]) + 0) , 3));
	arcs(Move[3][1]:CornerOr[7]:mod((tk(CornerOr[6]) + 1) , 3));
	arcs(CornerOr[7]:Move[3][1]:mod((tk(CornerOr[7]) + 0) , 3));
	arcs(Move[3][1]:CornerOr[3]:mod((tk(CornerOr[7]) + 1) , 3));
	arcs(CornerOr[3]:Move[3][1]:mod((tk(CornerOr[3]) + 0) , 3));
	arcs(Move[3][1]:CornerOr[2]:mod((tk(CornerOr[3]) + 2) , 3));

	// right counter-clockwise)
	arcs(Corner[2]:Move[3][2]:tk(Corner[2]));
	arcs(Move[3][2]:Corner[3]:tk(Corner[2]));
	arcs(Corner[6]:Move[3][2]:tk(Corner[6]));
	arcs(Move[3][2]:Corner[2]:tk(Corner[6]));
	arcs(Corner[7]:Move[3][2]:tk(Corner[7]));
	arcs(Move[3][2]:Corner[6]:tk(Corner[7]));
	arcs(Corner[3]:Move[3][2]:tk(Corner[3]));
	arcs(Move[3][2]:Corner[7]:tk(Corner[3]));
	arcs(CornerOr[2]:Move[3][2]:mod((tk(CornerOr[2]) + 0) , 3));
	arcs(Move[3][2]:CornerOr[3]:mod((tk(CornerOr[2]) + 1) , 3));
	arcs(CornerOr[6]:Move[3][2]:mod((tk(CornerOr[6]) + 0) , 3));
	arcs(Move[3][2]:CornerOr[2]:mod((tk(CornerOr[6]) + 1) , 3));
	arcs(CornerOr[7]:Move[3][2]:mod((tk(CornerOr[7]) + 0) , 3));
	arcs(Move[3][2]:CornerOr[6]:mod((tk(CornerOr[7]) + 2) , 3));
	arcs(CornerOr[3]:Move[3][2]:mod((tk(CornerOr[3]) + 0) , 3));
	arcs(Move[3][2]:CornerOr[7]:mod((tk(CornerOr[3]) + 2) , 3));

	// right half)
	arcs(Corner[2]:Move[3][3]:tk(Corner[2]));
	arcs(Move[3][3]:Corner[7]:tk(Corner[2]));
	arcs(Corner[6]:Move[3][3]:tk(Corner[6]));
	arcs(Move[3][3]:Corner[3]:tk(Corner[6]));
	arcs(Corner[7]:Move[3][3]:tk(Corner[7]));
	arcs(Move[3][3]:Corner[2]:tk(Corner[7]));
	arcs(Corner[3]:Move[3][3]:tk(Corner[3]));
	arcs(Move[3][3]:Corner[6]:tk(Corner[3]));
	arcs(CornerOr[2]:Move[3][3]:mod((tk(CornerOr[2]) + 0) , 3));
	arcs(Move[3][3]:CornerOr[7]:mod((tk(CornerOr[2]) + 0) , 3));
	arcs(CornerOr[6]:Move[3][3]:mod((tk(CornerOr[6]) + 0) , 3));
	arcs(Move[3][3]:CornerOr[3]:mod((tk(CornerOr[6]) + 2) , 3));
	arcs(CornerOr[7]:Move[3][3]:mod((tk(CornerOr[7]) + 0) , 3));
	arcs(Move[3][3]:CornerOr[2]:mod((tk(CornerOr[7]) + 0) , 3));
	arcs(CornerOr[3]:Move[3][3]:mod((tk(CornerOr[3]) + 0) , 3));
	arcs(Move[3][3]:CornerOr[6]:mod((tk(CornerOr[3]) + 1) , 3));

	// left clockwise)
	arcs(Corner[5]:Move[5][1]:tk(Corner[5]));
	arcs(Move[5][1]:Corner[1]:tk(Corner[5]));
	arcs(Corner[1]:Move[5][1]:tk(Corner[1]));
	arcs(Move[5][1]:Corner[4]:tk(Corner[1]));
	arcs(Corner[4]:Move[5][1]:tk(Corner[4]));
	arcs(Move[5][1]:Corner[8]:tk(Corner[4]));
	arcs(Corner[8]:Move[5][1]:tk(Corner[8]));
	arcs(Move[5][1]:Corner[5]:tk(Corner[8]));
	arcs(CornerOr[5]:Move[5][1]:mod((tk(CornerOr[5]) + 0) , 3));
	arcs(Move[5][1]:CornerOr[1]:mod((tk(CornerOr[5]) + 1) , 3));
	arcs(CornerOr[1]:Move[5][1]:mod((tk(CornerOr[1]) + 0) , 3));
	arcs(Move[5][1]:CornerOr[4]:mod((tk(CornerOr[1]) + 1) , 3));
	arcs(CornerOr[4]:Move[5][1]:mod((tk(CornerOr[4]) + 0) , 3));
	arcs(Move[5][1]:CornerOr[8]:mod((tk(CornerOr[4]) + 2) , 3));
	arcs(CornerOr[8]:Move[5][1]:mod((tk(CornerOr[8]) + 0) , 3));
	arcs(Move[5][1]:CornerOr[5]:mod((tk(CornerOr[8]) + 2) , 3));

	// left counter-clockwise)
	arcs(Corner[5]:Move[5][2]:tk(Corner[5]));
	arcs(Move[5][2]:Corner[8]:tk(Corner[5]));
	arcs(Corner[1]:Move[5][2]:tk(Corner[1]));
	arcs(Move[5][2]:Corner[5]:tk(Corner[1]));
	arcs(Corner[4]:Move[5][2]:tk(Corner[4]));
	arcs(Move[5][2]:Corner[1]:tk(Corner[4]));
	arcs(Corner[8]:Move[5][2]:tk(Corner[8]));
	arcs(Move[5][2]:Corner[4]:tk(Corner[8]));
	arcs(CornerOr[5]:Move[5][2]:mod((tk(CornerOr[5]) + 0) , 3));
	arcs(Move[5][2]:CornerOr[8]:mod((tk(CornerOr[5]) + 1) , 3));
	arcs(CornerOr[1]:Move[5][2]:mod((tk(CornerOr[1]) + 0) , 3));
	arcs(Move[5][2]:CornerOr[5]:mod((tk(CornerOr[1]) + 2) , 3));
	arcs(CornerOr[4]:Move[5][2]:mod((tk(CornerOr[4]) + 0) , 3));
	arcs(Move[5][2]:CornerOr[1]:mod((tk(CornerOr[4]) + 2) , 3));
	arcs(CornerOr[8]:Move[5][2]:mod((tk(CornerOr[8]) + 0) , 3));
	arcs(Move[5][2]:CornerOr[4]:mod((tk(CornerOr[8]) + 1) , 3));

	// left half)
	arcs(Corner[5]:Move[5][3]:tk(Corner[5]));
	arcs(Move[5][3]:Corner[4]:tk(Corner[5]));
	arcs(Corner[1]:Move[5][3]:tk(Corner[1]));
	arcs(Move[5][3]:Corner[8]:tk(Corner[1]));
	arcs(Corner[4]:Move[5][3]:tk(Corner[4]));
	arcs(Move[5][3]:Corner[5]:tk(Corner[4]));
	arcs(Corner[8]:Move[5][3]:tk(Corner[8]));
	arcs(Move[5][3]:Corner[1]:tk(Corner[8]));
	arcs(CornerOr[5]:Move[5][3]:mod((tk(CornerOr[5]) + 0) , 3));
	arcs(Move[5][3]:CornerOr[4]:mod((tk(CornerOr[5]) + 2) , 3));
	arcs(CornerOr[1]:Move[5][3]:mod((tk(CornerOr[1]) + 0) , 3));
	arcs(Move[5][3]:CornerOr[8]:mod((tk(CornerOr[1]) + 0) , 3));
	arcs(CornerOr[4]:Move[5][3]:mod((tk(CornerOr[4]) + 0) , 3));
	arcs(Move[5][3]:CornerOr[5]:mod((tk(CornerOr[4]) + 1) , 3));
	arcs(CornerOr[8]:Move[5][3]:mod((tk(CornerOr[8]) + 0) , 3));
	arcs(Move[5][3]:CornerOr[1]:mod((tk(CornerOr[8]) + 0) , 3));

	// top clockwise)
	arcs(Corner[2]:Move[2][1]:tk(Corner[2]));
	arcs(Move[2][1]:Corner[1]:tk(Corner[2]));
	arcs(Corner[1]:Move[2][1]:tk(Corner[1]));
	arcs(Move[2][1]:Corner[5]:tk(Corner[1]));
	arcs(Corner[5]:Move[2][1]:tk(Corner[5]));
	arcs(Move[2][1]:Corner[6]:tk(Corner[5]));
	arcs(Corner[6]:Move[2][1]:tk(Corner[6]));
	arcs(Move[2][1]:Corner[2]:tk(Corner[6]));
	arcs(CornerOr[2]:Move[2][1]:mod((tk(CornerOr[2]) + 0) , 3));
	arcs(Move[2][1]:CornerOr[1]:mod((tk(CornerOr[2]) + 2) , 3));
	arcs(CornerOr[1]:Move[2][1]:mod((tk(CornerOr[1]) + 0) , 3));
	arcs(Move[2][1]:CornerOr[5]:mod((tk(CornerOr[1]) + 1) , 3));
	arcs(CornerOr[5]:Move[2][1]:mod((tk(CornerOr[5]) + 0) , 3));
	arcs(Move[2][1]:CornerOr[6]:mod((tk(CornerOr[5]) + 1) , 3));
	arcs(CornerOr[6]:Move[2][1]:mod((tk(CornerOr[6]) + 0) , 3));
	arcs(Move[2][1]:CornerOr[2]:mod((tk(CornerOr[6]) + 2) , 3));

	// top counter-clockwise)
	arcs(Corner[2]:Move[2][2]:tk(Corner[2]));
	arcs(Move[2][2]:Corner[6]:tk(Corner[2]));
	arcs(Corner[1]:Move[2][2]:tk(Corner[1]));
	arcs(Move[2][2]:Corner[2]:tk(Corner[1]));
	arcs(Corner[5]:Move[2][2]:tk(Corner[5]));
	arcs(Move[2][2]:Corner[1]:tk(Corner[5]));
	arcs(Corner[6]:Move[2][2]:tk(Corner[6]));
	arcs(Move[2][2]:Corner[5]:tk(Corner[6]));
	arcs(CornerOr[2]:Move[2][2]:mod((tk(CornerOr[2]) + 0) , 3));
	arcs(Move[2][2]:CornerOr[6]:mod((tk(CornerOr[2]) + 1) , 3));
	arcs(CornerOr[1]:Move[2][2]:mod((tk(CornerOr[1]) + 0) , 3));
	arcs(Move[2][2]:CornerOr[2]:mod((tk(CornerOr[1]) + 1) , 3));
	arcs(CornerOr[5]:Move[2][2]:mod((tk(CornerOr[5]) + 0) , 3));
	arcs(Move[2][2]:CornerOr[1]:mod((tk(CornerOr[5]) + 2) , 3));
	arcs(CornerOr[6]:Move[2][2]:mod((tk(CornerOr[6]) + 0) , 3));
	arcs(Move[2][2]:CornerOr[5]:mod((tk(CornerOr[6]) + 2) , 3));

	// top half)
	arcs(Corner[2]:Move[2][3]:tk(Corner[2]));
	arcs(Move[2][3]:Corner[5]:tk(Corner[2]));
	arcs(Corner[1]:Move[2][3]:tk(Corner[1]));
	arcs(Move[2][3]:Corner[6]:tk(Corner[1]));
	arcs(Corner[5]:Move[2][3]:tk(Corner[5]));
	arcs(Move[2][3]:Corner[2]:tk(Corner[5]));
	arcs(Corner[6]:Move[2][3]:tk(Corner[6]));
	arcs(Move[2][3]:Corner[1]:tk(Corner[6]));
	arcs(CornerOr[2]:Move[2][3]:mod((tk(CornerOr[2]) + 0) , 3));
	arcs(Move[2][3]:CornerOr[5]:mod((tk(CornerOr[2]) + 0) , 3));
	arcs(CornerOr[1]:Move[2][3]:mod((tk(CornerOr[1]) + 0) , 3));
	arcs(Move[2][3]:CornerOr[6]:mod((tk(CornerOr[1]) + 2) , 3));
	arcs(CornerOr[5]:Move[2][3]:mod((tk(CornerOr[5]) + 0) , 3));
	arcs(Move[2][3]:CornerOr[2]:mod((tk(CornerOr[5]) + 0) , 3));
	arcs(CornerOr[6]:Move[2][3]:mod((tk(CornerOr[6]) + 0) , 3));
	arcs(Move[2][3]:CornerOr[1]:mod((tk(CornerOr[6]) + 1) , 3));

	// bottom clockwise)
	arcs(Corner[3]:Move[4][1]:tk(Corner[3]));
	arcs(Move[4][1]:Corner[7]:tk(Corner[3]));
	arcs(Corner[7]:Move[4][1]:tk(Corner[7]));
	arcs(Move[4][1]:Corner[8]:tk(Corner[7]));
	arcs(Corner[8]:Move[4][1]:tk(Corner[8]));
	arcs(Move[4][1]:Corner[4]:tk(Corner[8]));
	arcs(Corner[4]:Move[4][1]:tk(Corner[4]));
	arcs(Move[4][1]:Corner[3]:tk(Corner[4]));
	arcs(CornerOr[3]:Move[4][1]:mod((tk(CornerOr[3]) + 0) , 3));
	arcs(Move[4][1]:CornerOr[7]:mod((tk(CornerOr[3]) + 1) , 3));
	arcs(CornerOr[7]:Move[4][1]:mod((tk(CornerOr[7]) + 0) , 3));
	arcs(Move[4][1]:CornerOr[8]:mod((tk(CornerOr[7]) + 2) , 3));
	arcs(CornerOr[8]:Move[4][1]:mod((tk(CornerOr[8]) + 0) , 3));
	arcs(Move[4][1]:CornerOr[4]:mod((tk(CornerOr[8]) + 2) , 3));
	arcs(CornerOr[4]:Move[4][1]:mod((tk(CornerOr[4]) + 0) , 3));
	arcs(Move[4][1]:CornerOr[3]:mod((tk(CornerOr[4]) + 1) , 3));

	// bottom counter-clockwise)
	arcs(Corner[3]:Move[4][2]:tk(Corner[3]));
	arcs(Move[4][2]:Corner[4]:tk(Corner[3]));
	arcs(Corner[7]:Move[4][2]:tk(Corner[7]));
	arcs(Move[4][2]:Corner[3]:tk(Corner[7]));
	arcs(Corner[8]:Move[4][2]:tk(Corner[8]));
	arcs(Move[4][2]:Corner[7]:tk(Corner[8]));
	arcs(Corner[4]:Move[4][2]:tk(Corner[4]));
	arcs(Move[4][2]:Corner[8]:tk(Corner[4]));
	arcs(CornerOr[3]:Move[4][2]:mod((tk(CornerOr[3]) + 0) , 3));
	arcs(Move[4][2]:CornerOr[4]:mod((tk(CornerOr[3]) + 2) , 3));
	arcs(CornerOr[7]:Move[4][2]:mod((tk(CornerOr[7]) + 0) , 3));
	arcs(Move[4][2]:CornerOr[3]:mod((tk(CornerOr[7]) + 2) , 3));
	arcs(CornerOr[8]:Move[4][2]:mod((tk(CornerOr[8]) + 0) , 3));
	arcs(Move[4][2]:CornerOr[7]:mod((tk(CornerOr[8]) + 1) , 3));
	arcs(CornerOr[4]:Move[4][2]:mod((tk(CornerOr[4]) + 0) , 3));
	arcs(Move[4][2]:CornerOr[8]:mod((tk(CornerOr[4]) + 1) , 3));

	// bottom half)
	arcs(Corner[3]:Move[4][3]:tk(Corner[3]));
	arcs(Move[4][3]:Corner[8]:tk(Corner[3]));
	arcs(Corner[7]:Move[4][3]:tk(Corner[7]));
	arcs(Move[4][3]:Corner[4]:tk(Corner[7]));
	arcs(Corner[8]:Move[4][3]:tk(Corner[8]));
	arcs(Move[4][3]:Corner[3]:tk(Corner[8]));
	arcs(Corner[4]:Move[4][3]:tk(Corner[4]));
	arcs(Move[4][3]:Corner[7]:tk(Corner[4]));
	arcs(CornerOr[3]:Move[4][3]:mod((tk(CornerOr[3]) + 0) , 3));
	arcs(Move[4][3]:CornerOr[8]:mod((tk(CornerOr[3]) + 0) , 3));
	arcs(CornerOr[7]:Move[4][3]:mod((tk(CornerOr[7]) + 0) , 3));
	arcs(Move[4][3]:CornerOr[4]:mod((tk(CornerOr[7]) + 1) , 3));
	arcs(CornerOr[8]:Move[4][3]:mod((tk(CornerOr[8]) + 0) , 3));
	arcs(Move[4][3]:CornerOr[3]:mod((tk(CornerOr[8]) + 0) , 3));
	arcs(CornerOr[4]:Move[4][3]:mod((tk(CornerOr[4]) + 0) , 3));
	arcs(Move[4][3]:CornerOr[7]:mod((tk(CornerOr[4]) + 2) , 3));

	// count states
	bigint numstates := num_states(false);
};

# MDDUnionStrategy MDD_FI_EXT
# StateStorage MDD_SATURATION_TRANSITION
//# StateStorage NEW_AVL
# Verbose true
# Report true
//# Dump_MDD true

# MDDL_MemBound 30000
//# MDDL_CacheMemBound 2000
//# MDDL_UTMemBound 1000
# MDDL_CleanUp_Threshold 400000

print("The number of rubiks states is: ",rub.numstates,"\n");
