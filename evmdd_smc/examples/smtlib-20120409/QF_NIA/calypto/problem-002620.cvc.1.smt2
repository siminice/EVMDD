(set-logic QF_NIA)
(set-info :source |
    Sequential equivalence checking.
    Calypto Design Systems, Inc. <www.calypto.com>
  |)
(set-info :smt-lib-version 2.0)
(set-info :category "industrial")
(set-info :status sat)
(declare-fun P_2 () Int)
(declare-fun P_3 () Int)
(declare-fun P_4 () Bool)
(declare-fun P_5 () Bool)
(declare-fun P_6 () Bool)
(declare-fun P_7 () Bool)
(declare-fun P_8 () Bool)
(declare-fun P_9 () Bool)
(declare-fun P_10 () Bool)
(declare-fun P_11 () Bool)
(declare-fun P_12 () Bool)
(declare-fun P_13 () Bool)
(declare-fun P_14 () Bool)
(declare-fun P_15 () Bool)
(declare-fun P_16 () Bool)
(declare-fun P_17 () Bool)
(declare-fun P_18 () Bool)
(declare-fun P_19 () Bool)
(declare-fun P_20 () Bool)
(declare-fun P_21 () Bool)
(declare-fun P_22 () Int)
(declare-fun P_23 () Bool)
(declare-fun P_24 () Bool)
(declare-fun P_25 () Bool)
(declare-fun P_26 () Int)
(declare-fun P_27 () Int)
(declare-fun P_28 () Int)
(declare-fun P_29 () Int)
(declare-fun P_30 () Bool)
(declare-fun P_31 () Bool)
(declare-fun P_32 () Bool)
(declare-fun P_33 () Bool)
(declare-fun P_34 () Bool)
(declare-fun P_35 () Bool)
(declare-fun P_36 () Bool)
(declare-fun P_37 () Bool)
(declare-fun P_38 () Bool)
(declare-fun P_39 () Bool)
(declare-fun P_40 () Bool)
(declare-fun P_41 () Bool)
(declare-fun P_42 () Bool)
(declare-fun P_43 () Bool)
(declare-fun P_44 () Bool)
(declare-fun P_45 () Bool)
(declare-fun P_46 () Int)
(declare-fun P_47 () Int)
(assert (<= (* 2 (- 1)) P_2))
(assert (<= P_2 1))
(assert (<= 0 P_3))
(assert (<= P_3 4))
(assert (<= 0 P_22))
(assert (<= P_22 7))
(assert (<= 0 P_26))
(assert (<= P_26 511))
(assert (<= 0 P_27))
(assert (<= P_27 511))
(assert (<= 0 P_28))
(assert (<= P_28 1023))
(assert (<= 0 P_29))
(assert (<= P_29 3))
(assert (<= 0 P_46))
(assert (<= P_46 127))
(assert (<= 0 P_47))
(assert (<= P_47 127))
(declare-fun dz () Int)
(declare-fun rz () Int)
(assert (let ((?v_0 (not P_4)) (?v_9 (ite (= P_22 3) false (ite (= P_22 4) false (ite (= P_22 5) false (ite (= P_22 6) false false))))) (?v_8 (= P_22 2)) (?v_7 (= P_22 1)) (?v_6 (= P_22 0))) (let ((?v_1 (ite ?v_6 1 (ite ?v_7 2 (ite ?v_8 4 (ite ?v_9 1 0)))))) (let ((?v_2 (< (ite (< ?v_1 4) ?v_1 (- ?v_1 8)) 0))) (let ((?v_3 (- (+ (ite ?v_2 1 0) 1) 2))) (let ((?v_4 (- (+ (+ (ite (and (not ?v_2) P_23) 2 0) (ite (>= ?v_3 0) ?v_3 (+ ?v_3 2))) 2) 4))) (let ((?v_5 (ite (>= ?v_4 0) ?v_4 (+ ?v_4 4)))) (let ((?v_14 (not (or (or (or (or (< P_2 0) (< (ite (< P_3 4) P_3 (- P_3 8)) 0)) (and (and (and (and (not (ite ?v_0 P_5 false)) (not (ite ?v_0 P_6 false))) (and (not (ite ?v_0 P_7 false)) (not (ite ?v_0 P_8 false)))) (and (and (not (ite ?v_0 P_9 false)) (not (ite ?v_0 P_10 false))) (and (not (ite ?v_0 P_11 false)) (not (ite ?v_0 P_12 false))))) (and (and (and (not (ite ?v_0 P_13 false)) (not (ite ?v_0 P_14 false))) (and (not (ite ?v_0 P_15 false)) (not (ite ?v_0 P_16 false)))) (and (and (not (ite ?v_0 P_17 false)) (not (ite ?v_0 P_18 false))) (and (not (ite ?v_0 P_19 false)) (not (ite ?v_0 P_20 false))))))) (not P_21)) (not (ite ?v_0 (ite (= ?v_5 0) false (ite (= ?v_5 1) P_24 (ite (= ?v_5 2) P_25 false))) false))))) (?v_10 (ite ?v_6 1 (ite ?v_7 2 (ite (ite ?v_8 false ?v_9) 1 0))))) (let ((?v_12 (not (< (ite (< ?v_10 2) ?v_10 (- ?v_10 4)) 0)))) (let ((?v_11 (ite ?v_12 P_26 P_27))) (let ((?v_15 (ite (< ?v_11 256) ?v_11 (- ?v_11 512))) (?v_16 (* P_29 256))) (let ((?v_13 (ite ?v_12 P_28 (+ ?v_16 P_47))) (?v_17 (ite ?v_12 P_28 (+ ?v_16 (ite (not (not (and (not P_30) (and (not P_31) (and (not P_32) (and (not P_33) (and (not P_34) (and (not P_35) (and (not P_36) (and (not P_37) (and (not P_38) (and (not P_39) (and (not P_40) (and (not P_41) (and (not P_42) (and (not P_43) (and (not P_44) (not P_45)))))))))))))))))) P_46 P_47))))) (= (+ (* 524288 dz) rz) (- (ite (not ?v_14) 0 (ite ?v_0 (* ?v_15 (ite (< ?v_13 512) ?v_13 (- ?v_13 1024))) 0)) (ite ?v_14 (* ?v_15 (ite (< ?v_17 512) ?v_17 (- ?v_17 1024))) 0)))))))))))))))
(assert (> rz 0))
(assert (< rz 524288))
(check-sat)
(exit)
