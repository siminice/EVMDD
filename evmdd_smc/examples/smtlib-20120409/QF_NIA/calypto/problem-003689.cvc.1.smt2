(set-logic QF_NIA)
(set-info :source |
    Sequential equivalence checking.
    Calypto Design Systems, Inc. <www.calypto.com>
  |)
(set-info :smt-lib-version 2.0)
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun P_2 () Bool)
(declare-fun P_3 () Bool)
(declare-fun P_4 () Int)
(declare-fun P_5 () Int)
(declare-fun P_6 () Int)
(declare-fun P_7 () Int)
(declare-fun P_8 () Int)
(declare-fun P_9 () Bool)
(declare-fun P_10 () Int)
(declare-fun P_11 () Int)
(declare-fun P_12 () Int)
(declare-fun P_13 () Int)
(declare-fun P_14 () Int)
(declare-fun P_15 () Int)
(declare-fun P_16 () Int)
(declare-fun P_17 () Bool)
(declare-fun P_18 () Int)
(declare-fun P_19 () Int)
(declare-fun P_20 () Int)
(declare-fun P_21 () Int)
(declare-fun P_22 () Int)
(declare-fun P_23 () Int)
(declare-fun P_24 () Int)
(declare-fun P_25 () Int)
(declare-fun P_26 () Int)
(declare-fun P_27 () Int)
(declare-fun P_28 () Int)
(declare-fun P_29 () Int)
(declare-fun P_30 () Int)
(declare-fun P_31 () Int)
(declare-fun P_32 () Int)
(declare-fun P_33 () Int)
(declare-fun P_34 () Int)
(declare-fun P_35 () Int)
(declare-fun P_36 () Int)
(declare-fun P_37 () Int)
(declare-fun P_38 () Int)
(declare-fun P_39 () Int)
(declare-fun P_40 () Int)
(declare-fun P_41 () Int)
(declare-fun P_42 () Int)
(declare-fun P_43 () Int)
(declare-fun P_44 () Int)
(declare-fun P_45 () Int)
(declare-fun P_46 () Int)
(declare-fun P_47 () Int)
(declare-fun P_48 () Int)
(declare-fun P_49 () Int)
(declare-fun P_50 () Int)
(declare-fun P_54 () Int)
(declare-fun P_55 () Int)
(assert (<= 0 P_4))
(assert (<= P_4 255))
(assert (<= 0 P_5))
(assert (<= P_5 255))
(assert (<= 0 P_6))
(assert (<= P_6 255))
(assert (<= 0 P_7))
(assert (<= P_7 255))
(assert (<= 0 P_8))
(assert (<= P_8 3))
(assert (<= 0 P_10))
(assert (<= P_10 255))
(assert (<= 0 P_11))
(assert (<= P_11 255))
(assert (<= 0 P_12))
(assert (<= P_12 255))
(assert (<= 0 P_13))
(assert (<= P_13 255))
(assert (<= 0 P_14))
(assert (<= P_14 255))
(assert (<= 0 P_15))
(assert (<= P_15 255))
(assert (<= 0 P_16))
(assert (<= P_16 255))
(assert (<= 0 P_18))
(assert (<= P_18 127))
(assert (<= 0 P_19))
(assert (<= P_19 255))
(assert (<= 0 P_20))
(assert (<= P_20 3))
(assert (<= 0 P_21))
(assert (<= P_21 255))
(assert (<= 0 P_22))
(assert (<= P_22 255))
(assert (<= 0 P_23))
(assert (<= P_23 255))
(assert (<= 0 P_24))
(assert (<= P_24 255))
(assert (<= 0 P_25))
(assert (<= P_25 255))
(assert (<= 0 P_26))
(assert (<= P_26 255))
(assert (<= 0 P_27))
(assert (<= P_27 255))
(assert (<= 0 P_28))
(assert (<= P_28 255))
(assert (<= 0 P_29))
(assert (<= P_29 255))
(assert (<= 0 P_30))
(assert (<= P_30 255))
(assert (<= 0 P_31))
(assert (<= P_31 255))
(assert (<= 0 P_32))
(assert (<= P_32 255))
(assert (<= 0 P_33))
(assert (<= P_33 255))
(assert (<= 0 P_34))
(assert (<= P_34 255))
(assert (<= 0 P_35))
(assert (<= P_35 255))
(assert (<= 0 P_36))
(assert (<= P_36 255))
(assert (<= 0 P_37))
(assert (<= P_37 255))
(assert (<= 0 P_38))
(assert (<= P_38 255))
(assert (<= 0 P_39))
(assert (<= P_39 3))
(assert (<= 0 P_40))
(assert (<= P_40 255))
(assert (<= 0 P_41))
(assert (<= P_41 255))
(assert (<= 0 P_42))
(assert (<= P_42 255))
(assert (<= 0 P_43))
(assert (<= P_43 255))
(assert (<= 0 P_44))
(assert (<= P_44 255))
(assert (<= 0 P_45))
(assert (<= P_45 127))
(assert (<= 0 P_46))
(assert (<= P_46 255))
(assert (<= 0 P_47))
(assert (<= P_47 255))
(assert (<= 0 P_48))
(assert (<= P_48 255))
(assert (<= 0 P_49))
(assert (<= P_49 255))
(assert (<= 0 P_50))
(assert (<= P_50 255))
(assert (<= 0 P_54))
(assert (<= P_54 3))
(assert (<= 0 P_55))
(assert (<= P_55 255))
(declare-fun dz () Int)
(declare-fun rz () Int)
(assert (let ((?v_1 (ite (not P_2) (ite (not P_3) 2 1) 0)) (?v_3 (* P_5 P_6))) (let ((?v_2 (- P_4 ?v_3)) (?v_34 (- ?v_3 P_7)) (?v_4 (not P_9)) (?v_6 (* P_13 P_14))) (let ((?v_5 (- (ite ?v_4 (* P_10 P_11) P_12) (ite ?v_4 ?v_6 P_15))) (?v_11 (+ (ite P_17 128 0) P_18))) (let ((?v_35 (- (ite ?v_4 ?v_6 P_16) (ite ?v_4 ?v_11 P_19))) (?v_7 (- P_12 P_15)) (?v_36 (- P_16 P_19)) (?v_17 (= P_20 2)) (?v_16 (= P_20 1)) (?v_15 (= P_20 0))) (let ((?v_28 (ite ?v_15 ?v_7 (ite ?v_16 ?v_7 (ite ?v_17 ?v_36 P_21)))) (?v_14 (= P_8 2)) (?v_12 (= P_8 1)) (?v_10 (= P_8 0))) (let ((?v_23 (ite ?v_10 ?v_5 (ite ?v_12 ?v_5 (ite ?v_14 ?v_35 ?v_28)))) (?v_9 (= ?v_1 2)) (?v_8 (= ?v_1 1)) (?v_0 (= ?v_1 0)) (?v_13 (ite ?v_4 ?v_11 P_23)) (?v_37 (ite ?v_4 (- P_24 P_25) P_26)) (?v_29 (ite ?v_15 P_23 (ite ?v_16 P_23 (ite ?v_17 P_26 P_27))))) (let ((?v_24 (ite ?v_10 ?v_13 (ite ?v_12 ?v_13 (ite ?v_14 ?v_37 ?v_29))))) (let ((?v_18 (+ (ite ?v_0 ?v_2 (ite ?v_8 ?v_2 (ite ?v_9 ?v_34 ?v_23))) (ite ?v_0 P_7 (ite ?v_8 P_7 (ite ?v_9 P_22 ?v_24))))) (?v_19 (* (ite ?v_4 (- P_11 P_25) P_30) (ite ?v_4 P_31 P_32))) (?v_20 (* P_30 P_32))) (let ((?v_31 (ite ?v_15 ?v_20 (ite ?v_16 ?v_20 (ite ?v_17 (+ P_33 P_34) P_35))))) (let ((?v_26 (ite ?v_10 ?v_19 (ite ?v_12 ?v_19 (ite ?v_14 (+ (ite ?v_4 (- P_24 ?v_11) P_33) (ite ?v_4 (* P_24 P_31) P_34)) ?v_31)))) (?v_21 (* P_7 P_6)) (?v_22 (ite ?v_4 (* ?v_11 P_13) P_36)) (?v_32 (ite ?v_15 P_36 (ite ?v_16 P_36 (ite ?v_17 P_37 P_38))))) (let ((?v_27 (ite ?v_10 ?v_22 (ite ?v_12 ?v_22 (ite ?v_14 (ite ?v_4 P_14 P_37) ?v_32)))) (?v_25 (+ ?v_23 ?v_24)) (?v_30 (+ ?v_28 ?v_29)) (?v_33 (+ P_21 P_27)) (?v_52 (= P_39 2)) (?v_50 (= P_39 1)) (?v_49 (= P_39 0))) (let ((?v_60 (ite ?v_49 ?v_33 (ite ?v_50 ?v_33 (ite ?v_52 (+ P_35 P_38) P_40))))) (let ((?v_57 (ite ?v_15 ?v_30 (ite ?v_16 ?v_30 (ite ?v_17 (+ ?v_31 ?v_32) ?v_60))))) (let ((?v_54 (ite ?v_10 ?v_25 (ite ?v_12 ?v_25 (ite ?v_14 (+ ?v_26 ?v_27) ?v_57)))) (?v_47 (ite ?v_15 ?v_36 (ite ?v_16 ?v_36 (ite ?v_17 ?v_7 P_42))))) (let ((?v_42 (ite ?v_10 ?v_35 (ite ?v_12 ?v_35 (ite ?v_14 ?v_5 ?v_47)))) (?v_48 (ite ?v_15 P_26 (ite ?v_16 P_26 (ite ?v_17 P_23 P_43))))) (let ((?v_43 (ite ?v_10 ?v_37 (ite ?v_12 ?v_37 (ite ?v_14 ?v_13 ?v_48)))) (?v_38 (- (ite ?v_4 P_10 P_44) (ite ?v_4 (* (* P_45 P_18) 2) P_46))) (?v_39 (- P_44 P_46))) (let ((?v_44 (ite ?v_15 ?v_39 (ite ?v_16 ?v_39 (ite ?v_17 ?v_39 P_47)))) (?v_40 (ite ?v_4 P_10 P_48)) (?v_45 (ite ?v_15 P_48 (ite ?v_16 P_48 (ite ?v_17 P_48 P_49))))) (let ((?v_41 (- (ite ?v_10 ?v_38 (ite ?v_12 ?v_38 (ite ?v_14 ?v_38 ?v_44))) (ite ?v_10 ?v_40 (ite ?v_12 ?v_40 (ite ?v_14 ?v_40 ?v_45))))) (?v_46 (- ?v_44 ?v_45)) (?v_51 (- P_47 P_49))) (let ((?v_61 (ite ?v_49 ?v_51 (ite ?v_50 ?v_51 (ite ?v_52 (+ P_42 P_43) P_50))))) (let ((?v_58 (ite ?v_15 ?v_46 (ite ?v_16 ?v_46 (ite ?v_17 (+ ?v_47 ?v_48) ?v_61))))) (let ((?v_55 (ite ?v_10 ?v_41 (ite ?v_12 ?v_41 (ite ?v_14 (+ ?v_42 ?v_43) ?v_58))))) (let ((?v_53 (* (ite ?v_0 ?v_18 (ite ?v_8 ?v_18 (ite ?v_9 (+ (ite ?v_0 P_28 (ite ?v_8 P_28 (ite ?v_9 P_29 ?v_26))) (ite ?v_0 ?v_21 (ite ?v_8 ?v_21 (ite ?v_9 P_5 ?v_27)))) ?v_54))) (ite ?v_0 P_41 (ite ?v_8 P_41 (ite ?v_9 (+ (ite ?v_0 ?v_34 (ite ?v_8 ?v_34 (ite ?v_9 ?v_2 ?v_42))) (ite ?v_0 P_22 (ite ?v_8 P_22 (ite ?v_9 P_7 ?v_43)))) ?v_55))))) (?v_56 (* ?v_54 ?v_55)) (?v_59 (* ?v_57 ?v_58)) (?v_62 (* ?v_60 ?v_61)) (?v_63 (* P_40 P_50))) (= (+ (* 256 dz) rz) (- (ite ?v_0 ?v_53 (ite ?v_8 ?v_53 (ite ?v_9 ?v_53 (ite ?v_10 ?v_56 (ite ?v_12 ?v_56 (ite ?v_14 ?v_56 (ite ?v_15 ?v_59 (ite ?v_16 ?v_59 (ite ?v_17 ?v_59 (ite ?v_49 ?v_62 (ite ?v_50 ?v_62 (ite ?v_52 ?v_62 (ite (= P_54 0) ?v_63 (ite (= P_54 1) ?v_63 (ite (= P_54 2) ?v_63 P_55))))))))))))))) ?v_53)))))))))))))))))))))))))
(assert (> rz 0))
(assert (< rz 256))
(check-sat)
(exit)
