(set-logic QF_NIA)
(set-info :source |
    Sequential equivalence checking.
    Calypto Design Systems, Inc. <www.calypto.com>
  |)
(set-info :smt-lib-version 2.0)
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun P_2 () Bool)
(declare-fun P_3 () Bool)
(declare-fun P_4 () Int)
(declare-fun P_5 () Int)
(declare-fun P_6 () Int)
(declare-fun P_7 () Bool)
(declare-fun P_8 () Int)
(declare-fun P_9 () Int)
(declare-fun P_10 () Int)
(declare-fun P_11 () Int)
(declare-fun P_12 () Int)
(declare-fun P_13 () Int)
(declare-fun P_14 () Int)
(declare-fun P_15 () Int)
(declare-fun P_16 () Int)
(declare-fun P_17 () Int)
(declare-fun P_18 () Int)
(declare-fun P_19 () Int)
(declare-fun P_20 () Int)
(declare-fun P_21 () Int)
(declare-fun P_22 () Int)
(declare-fun P_23 () Int)
(declare-fun P_24 () Int)
(declare-fun P_25 () Int)
(declare-fun P_26 () Int)
(declare-fun P_27 () Int)
(declare-fun P_28 () Int)
(declare-fun P_29 () Int)
(declare-fun P_30 () Int)
(declare-fun P_31 () Int)
(declare-fun P_32 () Int)
(declare-fun P_33 () Int)
(declare-fun P_34 () Int)
(declare-fun P_35 () Int)
(declare-fun P_36 () Int)
(declare-fun P_37 () Int)
(declare-fun P_41 () Int)
(declare-fun P_42 () Int)
(declare-fun P_43 () Int)
(declare-fun P_44 () Int)
(declare-fun P_45 () Int)
(assert (<= 0 P_4))
(assert (<= P_4 255))
(assert (<= 0 P_5))
(assert (<= P_5 255))
(assert (<= 0 P_6))
(assert (<= P_6 3))
(assert (<= 0 P_8))
(assert (<= P_8 255))
(assert (<= 0 P_9))
(assert (<= P_9 255))
(assert (<= 0 P_10))
(assert (<= P_10 255))
(assert (<= 0 P_11))
(assert (<= P_11 255))
(assert (<= 0 P_12))
(assert (<= P_12 255))
(assert (<= 0 P_13))
(assert (<= P_13 255))
(assert (<= 0 P_14))
(assert (<= P_14 255))
(assert (<= 0 P_15))
(assert (<= P_15 255))
(assert (<= 0 P_16))
(assert (<= P_16 255))
(assert (<= 0 P_17))
(assert (<= P_17 3))
(assert (<= 0 P_18))
(assert (<= P_18 255))
(assert (<= 0 P_19))
(assert (<= P_19 255))
(assert (<= 0 P_20))
(assert (<= P_20 255))
(assert (<= 0 P_21))
(assert (<= P_21 255))
(assert (<= 0 P_22))
(assert (<= P_22 255))
(assert (<= 0 P_23))
(assert (<= P_23 255))
(assert (<= 0 P_24))
(assert (<= P_24 255))
(assert (<= 0 P_25))
(assert (<= P_25 255))
(assert (<= 0 P_26))
(assert (<= P_26 255))
(assert (<= 0 P_27))
(assert (<= P_27 255))
(assert (<= 0 P_28))
(assert (<= P_28 255))
(assert (<= 0 P_29))
(assert (<= P_29 255))
(assert (<= 0 P_30))
(assert (<= P_30 255))
(assert (<= 0 P_31))
(assert (<= P_31 255))
(assert (<= 0 P_32))
(assert (<= P_32 255))
(assert (<= 0 P_33))
(assert (<= P_33 255))
(assert (<= 0 P_34))
(assert (<= P_34 255))
(assert (<= 0 P_35))
(assert (<= P_35 255))
(assert (<= 0 P_36))
(assert (<= P_36 255))
(assert (<= 0 P_37))
(assert (<= P_37 255))
(assert (<= 0 P_41))
(assert (<= P_41 3))
(assert (<= 0 P_42))
(assert (<= P_42 255))
(assert (<= 0 P_43))
(assert (<= P_43 255))
(assert (<= 0 P_44))
(assert (<= P_44 3))
(assert (<= 0 P_45))
(assert (<= P_45 255))
(declare-fun dz () Int)
(declare-fun rz () Int)
(assert (let ((?v_1 (ite (not P_2) (ite (not P_3) 2 1) 0)) (?v_2 (not P_7))) (let ((?v_3 (+ (ite ?v_2 (- P_8 P_9) P_10) (ite ?v_2 (* P_8 P_11) P_12))) (?v_4 (+ P_10 P_12)) (?v_13 (= P_17 2)) (?v_12 (= P_17 1)) (?v_11 (= P_17 0))) (let ((?v_24 (ite ?v_11 ?v_4 (ite ?v_12 ?v_4 (ite ?v_13 (* P_15 P_16) P_18)))) (?v_10 (= P_6 2)) (?v_8 (= P_6 1)) (?v_7 (= P_6 0))) (let ((?v_21 (ite ?v_7 ?v_3 (ite ?v_8 ?v_3 (ite ?v_10 (* (ite ?v_2 (- P_13 P_14) P_15) (ite ?v_2 P_11 P_16)) ?v_24)))) (?v_6 (= ?v_1 2)) (?v_5 (= ?v_1 1)) (?v_0 (= ?v_1 0)) (?v_9 (ite ?v_2 P_22 P_23)) (?v_25 (ite ?v_11 P_23 (ite ?v_12 P_23 (ite ?v_13 P_25 P_26))))) (let ((?v_22 (ite ?v_7 ?v_9 (ite ?v_8 ?v_9 (ite ?v_10 (ite ?v_2 (* P_9 P_24) P_25) ?v_25)))) (?v_15 (* P_19 P_21))) (let ((?v_14 (- P_27 ?v_15)) (?v_17 (* P_24 P_22))) (let ((?v_16 (- (ite ?v_2 (* P_28 P_13) P_29) (ite ?v_2 ?v_17 P_30))) (?v_18 (- P_29 P_30))) (let ((?v_31 (ite ?v_11 ?v_18 (ite ?v_12 ?v_18 (ite ?v_13 (- P_31 P_32) P_33))))) (let ((?v_28 (ite ?v_7 ?v_16 (ite ?v_8 ?v_16 (ite ?v_10 (- (ite ?v_2 ?v_17 P_31) (ite ?v_2 P_9 P_32)) ?v_31)))) (?v_19 (ite ?v_2 P_9 P_35)) (?v_32 (ite ?v_11 P_35 (ite ?v_12 P_35 (ite ?v_13 P_36 P_37))))) (let ((?v_29 (ite ?v_7 ?v_19 (ite ?v_8 ?v_19 (ite ?v_10 (ite ?v_2 (- P_8 P_14) P_36) ?v_32))))) (let ((?v_20 (* (+ (ite ?v_0 P_4 (ite ?v_5 P_4 (ite ?v_6 P_5 ?v_21))) (ite ?v_0 P_19 (ite ?v_5 P_19 (ite ?v_6 (* P_20 P_21) ?v_22)))) (+ (ite ?v_0 ?v_14 (ite ?v_5 ?v_14 (ite ?v_6 (- ?v_15 P_20) ?v_28))) (ite ?v_0 P_20 (ite ?v_5 P_20 (ite ?v_6 P_34 ?v_29)))))) (?v_23 (+ ?v_21 ?v_22)) (?v_26 (+ ?v_24 ?v_25)) (?v_27 (+ P_18 P_26)) (?v_37 (= P_41 2)) (?v_35 (= P_41 1)) (?v_34 (= P_41 0))) (let ((?v_42 (ite ?v_34 ?v_27 (ite ?v_35 ?v_27 (ite ?v_37 ?v_27 P_42))))) (let ((?v_39 (ite ?v_11 ?v_26 (ite ?v_12 ?v_26 (ite ?v_13 ?v_26 ?v_42)))) (?v_30 (+ ?v_28 ?v_29)) (?v_33 (+ ?v_31 ?v_32)) (?v_36 (+ P_33 P_37))) (let ((?v_43 (ite ?v_34 ?v_36 (ite ?v_35 ?v_36 (ite ?v_37 ?v_36 P_43))))) (let ((?v_40 (ite ?v_11 ?v_33 (ite ?v_12 ?v_33 (ite ?v_13 ?v_33 ?v_43))))) (let ((?v_38 (* (ite ?v_7 ?v_23 (ite ?v_8 ?v_23 (ite ?v_10 ?v_23 ?v_39))) (ite ?v_7 ?v_30 (ite ?v_8 ?v_30 (ite ?v_10 ?v_30 ?v_40))))) (?v_41 (* ?v_39 ?v_40)) (?v_44 (* ?v_42 ?v_43)) (?v_45 (* P_42 P_43))) (= (+ (* 256 dz) rz) (- (ite ?v_0 ?v_20 (ite ?v_5 ?v_20 (ite ?v_6 ?v_20 (ite ?v_7 ?v_38 (ite ?v_8 ?v_38 (ite ?v_10 ?v_38 (ite ?v_11 ?v_41 (ite ?v_12 ?v_41 (ite ?v_13 ?v_41 (ite ?v_34 ?v_44 (ite ?v_35 ?v_44 (ite ?v_37 ?v_44 (ite (= P_44 0) ?v_45 (ite (= P_44 1) ?v_45 (ite (= P_44 2) ?v_45 P_45))))))))))))))) ?v_20)))))))))))))))))))
(assert (> rz 0))
(assert (< rz 256))
(check-sat)
(exit)
