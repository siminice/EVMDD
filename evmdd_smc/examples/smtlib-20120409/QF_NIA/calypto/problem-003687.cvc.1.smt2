(set-logic QF_NIA)
(set-info :source |
    Sequential equivalence checking.
    Calypto Design Systems, Inc. <www.calypto.com>
  |)
(set-info :smt-lib-version 2.0)
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun P_2 () Bool)
(declare-fun P_3 () Bool)
(declare-fun P_4 () Int)
(declare-fun P_5 () Int)
(declare-fun P_6 () Int)
(declare-fun P_7 () Bool)
(declare-fun P_8 () Int)
(declare-fun P_9 () Int)
(declare-fun P_10 () Int)
(declare-fun P_11 () Int)
(declare-fun P_12 () Int)
(declare-fun P_13 () Int)
(declare-fun P_14 () Int)
(declare-fun P_15 () Int)
(declare-fun P_16 () Int)
(declare-fun P_17 () Int)
(declare-fun P_18 () Int)
(declare-fun P_19 () Int)
(declare-fun P_20 () Int)
(declare-fun P_21 () Int)
(declare-fun P_22 () Int)
(declare-fun P_23 () Int)
(declare-fun P_24 () Int)
(declare-fun P_25 () Int)
(declare-fun P_26 () Int)
(declare-fun P_27 () Int)
(declare-fun P_28 () Int)
(declare-fun P_29 () Int)
(declare-fun P_30 () Int)
(declare-fun P_31 () Int)
(declare-fun P_32 () Int)
(declare-fun P_33 () Int)
(declare-fun P_34 () Int)
(declare-fun P_35 () Int)
(declare-fun P_36 () Int)
(declare-fun P_40 () Int)
(declare-fun P_41 () Int)
(assert (<= 0 P_4))
(assert (<= P_4 255))
(assert (<= 0 P_5))
(assert (<= P_5 255))
(assert (<= 0 P_6))
(assert (<= P_6 3))
(assert (<= 0 P_8))
(assert (<= P_8 255))
(assert (<= 0 P_9))
(assert (<= P_9 255))
(assert (<= 0 P_10))
(assert (<= P_10 255))
(assert (<= 0 P_11))
(assert (<= P_11 255))
(assert (<= 0 P_12))
(assert (<= P_12 255))
(assert (<= 0 P_13))
(assert (<= P_13 3))
(assert (<= 0 P_14))
(assert (<= P_14 255))
(assert (<= 0 P_15))
(assert (<= P_15 255))
(assert (<= 0 P_16))
(assert (<= P_16 255))
(assert (<= 0 P_17))
(assert (<= P_17 255))
(assert (<= 0 P_18))
(assert (<= P_18 255))
(assert (<= 0 P_19))
(assert (<= P_19 255))
(assert (<= 0 P_20))
(assert (<= P_20 255))
(assert (<= 0 P_21))
(assert (<= P_21 255))
(assert (<= 0 P_22))
(assert (<= P_22 255))
(assert (<= 0 P_23))
(assert (<= P_23 255))
(assert (<= 0 P_24))
(assert (<= P_24 255))
(assert (<= 0 P_25))
(assert (<= P_25 255))
(assert (<= 0 P_26))
(assert (<= P_26 3))
(assert (<= 0 P_27))
(assert (<= P_27 255))
(assert (<= 0 P_28))
(assert (<= P_28 255))
(assert (<= 0 P_29))
(assert (<= P_29 255))
(assert (<= 0 P_30))
(assert (<= P_30 255))
(assert (<= 0 P_31))
(assert (<= P_31 255))
(assert (<= 0 P_32))
(assert (<= P_32 255))
(assert (<= 0 P_33))
(assert (<= P_33 255))
(assert (<= 0 P_34))
(assert (<= P_34 255))
(assert (<= 0 P_35))
(assert (<= P_35 255))
(assert (<= 0 P_36))
(assert (<= P_36 255))
(assert (<= 0 P_40))
(assert (<= P_40 3))
(assert (<= 0 P_41))
(assert (<= P_41 255))
(declare-fun dz () Int)
(declare-fun rz () Int)
(assert (let ((?v_1 (ite (not P_2) (ite (not P_3) 2 1) 0)) (?v_3 (not P_7))) (let ((?v_4 (* (ite ?v_3 (+ P_8 P_9) P_10) (ite ?v_3 P_11 P_12))) (?v_5 (* P_10 P_12)) (?v_11 (= P_13 2)) (?v_10 (= P_13 1)) (?v_9 (= P_13 0))) (let ((?v_16 (ite ?v_9 ?v_5 (ite ?v_10 ?v_5 (ite ?v_11 ?v_5 P_14)))) (?v_8 (= P_6 2)) (?v_6 (= P_6 1)) (?v_2 (= P_6 0)) (?v_7 (ite ?v_3 (* P_15 P_8) P_16)) (?v_17 (ite ?v_9 P_16 (ite ?v_10 P_16 (ite ?v_11 P_16 P_17))))) (let ((?v_12 (+ (ite ?v_2 ?v_4 (ite ?v_6 ?v_4 (ite ?v_8 ?v_4 ?v_16))) (ite ?v_2 ?v_7 (ite ?v_6 ?v_7 (ite ?v_8 ?v_7 ?v_17))))) (?v_13 (ite ?v_3 (* P_18 P_11) P_19)) (?v_19 (ite ?v_9 P_19 (ite ?v_10 P_19 (ite ?v_11 P_19 P_20)))) (?v_14 (- (ite ?v_3 (+ P_21 P_15) P_22) (ite ?v_3 P_23 P_24))) (?v_15 (- P_22 P_24))) (let ((?v_20 (ite ?v_9 ?v_15 (ite ?v_10 ?v_15 (ite ?v_11 ?v_15 P_25)))) (?v_18 (+ ?v_16 ?v_17)) (?v_21 (+ P_14 P_17)) (?v_34 (= P_26 2)) (?v_32 (= P_26 1)) (?v_31 (= P_26 0))) (let ((?v_42 (ite ?v_31 ?v_21 (ite ?v_32 ?v_21 (ite ?v_34 (- P_20 P_25) P_27))))) (let ((?v_39 (ite ?v_9 ?v_18 (ite ?v_10 ?v_18 (ite ?v_11 (- ?v_19 ?v_20) ?v_42))))) (let ((?v_36 (ite ?v_2 ?v_12 (ite ?v_6 ?v_12 (ite ?v_8 (- (ite ?v_2 ?v_13 (ite ?v_6 ?v_13 (ite ?v_8 ?v_13 ?v_19))) (ite ?v_2 ?v_14 (ite ?v_6 ?v_14 (ite ?v_8 ?v_14 ?v_20)))) ?v_39)))) (?v_23 (= ?v_1 2)) (?v_22 (= ?v_1 1)) (?v_0 (= ?v_1 0)) (?v_24 (+ (ite ?v_3 (- P_29 P_30) P_31) (ite ?v_3 (* P_23 P_18) P_32))) (?v_25 (+ P_31 P_32))) (let ((?v_28 (ite ?v_9 ?v_25 (ite ?v_10 ?v_25 (ite ?v_11 ?v_25 P_33)))) (?v_26 (ite ?v_3 P_11 P_34)) (?v_29 (ite ?v_9 P_34 (ite ?v_10 P_34 (ite ?v_11 P_34 P_35))))) (let ((?v_27 (+ (ite ?v_2 ?v_24 (ite ?v_6 ?v_24 (ite ?v_8 ?v_24 ?v_28))) (ite ?v_2 ?v_26 (ite ?v_6 ?v_26 (ite ?v_8 ?v_26 ?v_29))))) (?v_30 (+ ?v_28 ?v_29)) (?v_33 (+ P_33 P_35))) (let ((?v_43 (ite ?v_31 ?v_33 (ite ?v_32 ?v_33 (ite ?v_34 ?v_21 P_36))))) (let ((?v_40 (ite ?v_9 ?v_30 (ite ?v_10 ?v_30 (ite ?v_11 ?v_18 ?v_43))))) (let ((?v_37 (ite ?v_2 ?v_27 (ite ?v_6 ?v_27 (ite ?v_8 ?v_12 ?v_40))))) (let ((?v_35 (* (ite ?v_0 P_4 (ite ?v_22 P_4 (ite ?v_23 P_5 ?v_36))) (ite ?v_0 P_28 (ite ?v_22 P_28 (ite ?v_23 P_4 ?v_37))))) (?v_38 (* ?v_36 ?v_37)) (?v_41 (* ?v_39 ?v_40)) (?v_44 (* ?v_42 ?v_43)) (?v_45 (* P_27 P_36))) (= (+ (* 256 dz) rz) (- (ite ?v_0 ?v_35 (ite ?v_22 ?v_35 (ite ?v_23 ?v_35 (ite ?v_2 ?v_38 (ite ?v_6 ?v_38 (ite ?v_8 ?v_38 (ite ?v_9 ?v_41 (ite ?v_10 ?v_41 (ite ?v_11 ?v_41 (ite ?v_31 ?v_44 (ite ?v_32 ?v_44 (ite ?v_34 ?v_44 (ite (= P_40 0) ?v_45 (ite (= P_40 1) ?v_45 (ite (= P_40 2) ?v_45 P_41))))))))))))))) ?v_35)))))))))))))))))
(assert (> rz 0))
(assert (< rz 256))
(check-sat)
(exit)
