(set-logic QF_NIA)
(set-info :source |
    Sequential equivalence checking.
    Calypto Design Systems, Inc. <www.calypto.com>
  |)
(set-info :smt-lib-version 2.0)
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun P_2 () Bool)
(declare-fun P_3 () Int)
(declare-fun P_4 () Int)
(declare-fun P_5 () Int)
(declare-fun P_6 () Int)
(assert (<= 0 P_3))
(assert (<= P_3 255))
(assert (<= 0 P_4))
(assert (<= P_4 1016))
(assert (<= 0 P_5))
(assert (<= P_5 127))
(assert (<= 0 P_6))
(assert (<= P_6 255))
(declare-fun dz () Int)
(declare-fun rz () Int)
(assert (let ((?v_0 (ite P_2 1 0)) (?v_1 (* P_3 P_6))) (let ((?v_5 (= (ite (>= ?v_0 0) ?v_0 (+ ?v_0 2)) 0)) (?v_2 (* 1 (- 1)))) (let ((?v_3 (- ?v_2 (ite (not (> (ite (< P_4 512) P_4 (- P_4 1024)) 127)) P_5 ?v_2)))) (let ((?v_6 (* P_3 (ite (>= ?v_3 0) ?v_3 (+ ?v_3 128))))) (let ((?v_4 (* ?v_6 P_6))) (let ((?v_7 (- ?v_4))) (= (+ (* 134217728 dz) rz) (- (ite (not (< (ite ?v_5 ?v_1 (- ?v_1)) 0)) ?v_4 ?v_7) (ite (not (< (ite ?v_5 ?v_6 (+ (- ?v_2 ?v_6) 1)) 0)) ?v_4 ?v_7))))))))))
(assert (> rz 0))
(assert (< rz 134217728))
(check-sat)
(exit)
