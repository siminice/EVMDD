(set-logic QF_NIA)
(set-info :source |
    Sequential equivalence checking.
    Calypto Design Systems, Inc. <www.calypto.com>
  |)
(set-info :smt-lib-version 2.0)
(set-info :category "industrial")
(set-info :status sat)
(declare-fun P_2 () Int)
(declare-fun P_3 () Int)
(declare-fun P_4 () Int)
(declare-fun P_5 () Int)
(declare-fun P_6 () Int)
(declare-fun P_7 () Int)
(declare-fun P_8 () Int)
(declare-fun P_9 () Int)
(declare-fun P_10 () Int)
(declare-fun P_11 () Int)
(declare-fun P_12 () Int)
(declare-fun P_13 () Int)
(declare-fun P_14 () Int)
(declare-fun P_15 () Int)
(declare-fun P_16 () Int)
(declare-fun P_17 () Int)
(declare-fun P_18 () Int)
(declare-fun P_19 () Int)
(declare-fun P_20 () Int)
(declare-fun P_21 () Int)
(declare-fun P_22 () Int)
(declare-fun P_23 () Int)
(assert (<= 0 P_2))
(assert (<= P_2 3))
(assert (<= 0 P_3))
(assert (<= P_3 255))
(assert (<= 0 P_4))
(assert (<= P_4 255))
(assert (<= 0 P_5))
(assert (<= P_5 255))
(assert (<= 0 P_6))
(assert (<= P_6 255))
(assert (<= 0 P_7))
(assert (<= P_7 255))
(assert (<= 0 P_8))
(assert (<= P_8 3))
(assert (<= 0 P_9))
(assert (<= P_9 255))
(assert (<= 0 P_10))
(assert (<= P_10 255))
(assert (<= 0 P_11))
(assert (<= P_11 255))
(assert (<= 0 P_12))
(assert (<= P_12 255))
(assert (<= 0 P_13))
(assert (<= P_13 3))
(assert (<= 0 P_14))
(assert (<= P_14 255))
(assert (<= 0 P_15))
(assert (<= P_15 255))
(assert (<= 0 P_16))
(assert (<= P_16 255))
(assert (<= 0 P_17))
(assert (<= P_17 255))
(assert (<= 0 P_18))
(assert (<= P_18 255))
(assert (<= 0 P_19))
(assert (<= P_19 255))
(assert (<= 0 P_20))
(assert (<= P_20 255))
(assert (<= 0 P_21))
(assert (<= P_21 255))
(assert (<= 0 P_22))
(assert (<= P_22 3))
(assert (<= 0 P_23))
(assert (<= P_23 255))
(declare-fun dz () Int)
(declare-fun rz () Int)
(assert (let ((?v_1 (* P_3 P_4)) (?v_3 (= P_2 2)) (?v_2 (= P_2 1)) (?v_0 (= P_2 0))) (let ((?v_4 (+ (ite ?v_0 ?v_1 (ite ?v_2 ?v_1 (ite ?v_3 ?v_1 P_5))) (ite ?v_0 P_6 (ite ?v_2 P_6 (ite ?v_3 P_6 P_7))))) (?v_5 (+ P_5 P_7)) (?v_9 (= P_8 2)) (?v_8 (= P_8 1)) (?v_7 (= P_8 0))) (let ((?v_11 (ite ?v_7 ?v_5 (ite ?v_8 ?v_5 (ite ?v_9 ?v_5 P_9)))) (?v_6 (ite ?v_0 P_10 (ite ?v_2 P_10 (ite ?v_3 P_10 P_11)))) (?v_12 (ite ?v_7 P_11 (ite ?v_8 P_11 (ite ?v_9 P_11 P_12))))) (let ((?v_10 (+ (ite ?v_0 ?v_4 (ite ?v_2 ?v_4 (ite ?v_3 ?v_4 ?v_11))) (ite ?v_0 ?v_6 (ite ?v_2 ?v_6 (ite ?v_3 ?v_6 ?v_12))))) (?v_13 (+ ?v_11 ?v_12)) (?v_14 (+ P_9 P_12)) (?v_22 (= P_13 2)) (?v_21 (= P_13 1)) (?v_20 (= P_13 0))) (let ((?v_27 (ite ?v_20 ?v_14 (ite ?v_21 ?v_14 (ite ?v_22 ?v_14 P_14))))) (let ((?v_24 (ite ?v_7 ?v_13 (ite ?v_8 ?v_13 (ite ?v_9 ?v_13 ?v_27)))) (?v_15 (- P_17 P_18))) (let ((?v_16 (- (ite ?v_0 P_15 (ite ?v_2 P_15 (ite ?v_3 P_15 P_16))) (ite ?v_0 ?v_15 (ite ?v_2 ?v_15 (ite ?v_3 ?v_15 P_19))))) (?v_17 (- P_16 P_19))) (let ((?v_19 (ite ?v_7 ?v_17 (ite ?v_8 ?v_17 (ite ?v_9 ?v_17 P_20))))) (let ((?v_18 (ite ?v_0 ?v_16 (ite ?v_2 ?v_16 (ite ?v_3 ?v_16 ?v_19)))) (?v_28 (ite ?v_20 P_20 (ite ?v_21 P_20 (ite ?v_22 P_20 P_21))))) (let ((?v_25 (ite ?v_7 ?v_19 (ite ?v_8 ?v_19 (ite ?v_9 ?v_19 ?v_28))))) (let ((?v_23 (* (ite ?v_0 ?v_10 (ite ?v_2 ?v_10 (ite ?v_3 ?v_10 ?v_24))) (ite ?v_0 ?v_18 (ite ?v_2 ?v_18 (ite ?v_3 ?v_18 ?v_25))))) (?v_26 (* ?v_24 ?v_25)) (?v_29 (* ?v_27 ?v_28)) (?v_30 (* P_14 P_21))) (= (+ (* 256 dz) rz) (- (ite ?v_0 ?v_23 (ite ?v_2 ?v_23 (ite ?v_3 ?v_23 (ite ?v_7 ?v_26 (ite ?v_8 ?v_26 (ite ?v_9 ?v_26 (ite ?v_20 ?v_29 (ite ?v_21 ?v_29 (ite ?v_22 ?v_29 (ite (= P_22 0) ?v_30 (ite (= P_22 1) ?v_30 (ite (= P_22 2) ?v_30 P_23)))))))))))) ?v_23))))))))))))))
(assert (> rz 0))
(assert (< rz 256))
(check-sat)
(exit)
