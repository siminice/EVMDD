(set-logic QF_NIA)
(set-info :source |
    Sequential equivalence checking.
    Calypto Design Systems, Inc. <www.calypto.com>
  |)
(set-info :smt-lib-version 2.0)
(set-info :category "industrial")
(set-info :status sat)
(declare-fun P_2 () Int)
(declare-fun P_3 () Int)
(declare-fun P_4 () Int)
(declare-fun P_5 () Int)
(declare-fun P_6 () Int)
(declare-fun P_7 () Int)
(declare-fun P_8 () Int)
(declare-fun P_9 () Int)
(declare-fun P_10 () Int)
(declare-fun P_11 () Int)
(declare-fun P_12 () Int)
(declare-fun P_13 () Int)
(declare-fun P_14 () Int)
(declare-fun P_15 () Int)
(declare-fun P_16 () Int)
(declare-fun P_17 () Int)
(declare-fun P_18 () Int)
(declare-fun P_19 () Int)
(declare-fun P_20 () Int)
(declare-fun P_21 () Int)
(declare-fun P_22 () Int)
(declare-fun P_23 () Int)
(declare-fun P_24 () Int)
(declare-fun P_25 () Int)
(declare-fun P_26 () Int)
(declare-fun P_27 () Int)
(declare-fun P_28 () Int)
(declare-fun P_29 () Int)
(declare-fun P_30 () Int)
(declare-fun P_31 () Int)
(declare-fun P_32 () Int)
(declare-fun P_33 () Int)
(declare-fun P_34 () Int)
(declare-fun P_35 () Int)
(declare-fun P_36 () Int)
(declare-fun P_37 () Int)
(declare-fun P_38 () Int)
(declare-fun P_39 () Int)
(declare-fun P_40 () Int)
(declare-fun P_41 () Int)
(declare-fun P_42 () Int)
(declare-fun P_43 () Int)
(declare-fun P_44 () Int)
(declare-fun P_45 () Int)
(declare-fun P_46 () Int)
(declare-fun P_47 () Int)
(declare-fun P_48 () Int)
(declare-fun P_49 () Int)
(assert (<= 0 P_2))
(assert (<= P_2 15))
(assert (<= 0 P_3))
(assert (<= P_3 15))
(assert (<= 0 P_4))
(assert (<= P_4 15))
(assert (<= 0 P_5))
(assert (<= P_5 15))
(assert (<= 0 P_6))
(assert (<= P_6 15))
(assert (<= 0 P_7))
(assert (<= P_7 15))
(assert (<= 0 P_8))
(assert (<= P_8 15))
(assert (<= 0 P_9))
(assert (<= P_9 15))
(assert (<= 0 P_10))
(assert (<= P_10 15))
(assert (<= 0 P_11))
(assert (<= P_11 15))
(assert (<= 0 P_12))
(assert (<= P_12 15))
(assert (<= 0 P_13))
(assert (<= P_13 15))
(assert (<= 0 P_14))
(assert (<= P_14 15))
(assert (<= 0 P_15))
(assert (<= P_15 15))
(assert (<= 0 P_16))
(assert (<= P_16 15))
(assert (<= 0 P_17))
(assert (<= P_17 15))
(assert (<= 0 P_18))
(assert (<= P_18 15))
(assert (<= 0 P_19))
(assert (<= P_19 15))
(assert (<= 0 P_20))
(assert (<= P_20 15))
(assert (<= 0 P_21))
(assert (<= P_21 15))
(assert (<= 0 P_22))
(assert (<= P_22 15))
(assert (<= 0 P_23))
(assert (<= P_23 15))
(assert (<= 0 P_24))
(assert (<= P_24 15))
(assert (<= 0 P_25))
(assert (<= P_25 15))
(assert (<= 0 P_26))
(assert (<= P_26 15))
(assert (<= 0 P_27))
(assert (<= P_27 15))
(assert (<= 0 P_28))
(assert (<= P_28 15))
(assert (<= 0 P_29))
(assert (<= P_29 15))
(assert (<= 0 P_30))
(assert (<= P_30 15))
(assert (<= 0 P_31))
(assert (<= P_31 15))
(assert (<= 0 P_32))
(assert (<= P_32 15))
(assert (<= 0 P_33))
(assert (<= P_33 15))
(assert (<= 0 P_34))
(assert (<= P_34 15))
(assert (<= 0 P_35))
(assert (<= P_35 15))
(assert (<= 0 P_36))
(assert (<= P_36 15))
(assert (<= 0 P_37))
(assert (<= P_37 15))
(assert (<= 0 P_38))
(assert (<= P_38 15))
(assert (<= 0 P_39))
(assert (<= P_39 15))
(assert (<= 0 P_40))
(assert (<= P_40 15))
(assert (<= 0 P_41))
(assert (<= P_41 15))
(assert (<= 0 P_42))
(assert (<= P_42 15))
(assert (<= 0 P_43))
(assert (<= P_43 15))
(assert (<= 0 P_44))
(assert (<= P_44 15))
(assert (<= 0 P_45))
(assert (<= P_45 15))
(assert (<= 0 P_46))
(assert (<= P_46 15))
(assert (<= 0 P_47))
(assert (<= P_47 15))
(assert (<= 0 P_48))
(assert (<= P_48 15))
(assert (<= 0 P_49))
(assert (<= P_49 15))
(declare-fun dz () Int)
(declare-fun rz () Int)
(assert (let ((?v_0 (* P_2 P_3))) (let ((?v_1 (+ (+ ?v_0 (* P_4 ?v_0)) (* P_5 P_6)))) (let ((?v_2 (+ (+ ?v_1 (* P_7 ?v_1)) (* P_8 P_9)))) (let ((?v_3 (+ (+ ?v_2 (* P_10 ?v_2)) (* P_11 P_12)))) (let ((?v_4 (+ (+ ?v_3 (* P_13 ?v_3)) (* P_14 P_15)))) (let ((?v_5 (+ (+ ?v_4 (* P_16 ?v_4)) (* P_17 P_18)))) (let ((?v_6 (+ (+ ?v_5 (* P_19 ?v_5)) (* P_20 P_21)))) (let ((?v_7 (+ (+ ?v_6 (* P_22 ?v_6)) (* P_23 P_24)))) (let ((?v_8 (+ (+ ?v_7 (* P_25 ?v_7)) (* P_26 P_27)))) (let ((?v_9 (+ (+ ?v_8 (* P_28 ?v_8)) (* P_29 P_30)))) (let ((?v_10 (+ (+ ?v_9 (* P_31 ?v_9)) (* P_32 P_33)))) (let ((?v_11 (+ (+ ?v_10 (* P_34 ?v_10)) (* P_35 P_36)))) (let ((?v_12 (+ (+ ?v_11 (* P_37 ?v_11)) (* P_38 P_39)))) (let ((?v_13 (+ (+ ?v_12 (* P_40 ?v_12)) (* P_41 P_42)))) (let ((?v_14 (+ (+ ?v_13 (* P_43 ?v_13)) (* P_44 P_45)))) (let ((?v_15 (+ (+ ?v_14 (* P_46 ?v_14)) (* P_47 P_48)))) (= (+ (* 4096 dz) rz) (- (+ ?v_15 (* P_49 ?v_15)) 0)))))))))))))))))))
(assert (> rz 0))
(assert (< rz 4096))
(check-sat)
(exit)
