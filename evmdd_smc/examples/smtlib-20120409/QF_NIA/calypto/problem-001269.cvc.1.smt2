(set-logic QF_NIA)
(set-info :source |
    Sequential equivalence checking.
    Calypto Design Systems, Inc. <www.calypto.com>
  |)
(set-info :smt-lib-version 2.0)
(set-info :category "industrial")
(set-info :status sat)
(declare-fun P_2 () Int)
(declare-fun P_3 () Int)
(declare-fun P_4 () Bool)
(declare-fun P_5 () Int)
(declare-fun P_6 () Int)
(declare-fun P_7 () Int)
(declare-fun P_8 () Int)
(declare-fun P_9 () Int)
(declare-fun P_10 () Int)
(declare-fun P_11 () Int)
(declare-fun P_12 () Int)
(declare-fun P_13 () Int)
(declare-fun P_14 () Int)
(declare-fun P_15 () Int)
(declare-fun P_16 () Int)
(declare-fun P_17 () Int)
(declare-fun P_18 () Int)
(declare-fun P_19 () Int)
(declare-fun P_20 () Int)
(declare-fun P_21 () Int)
(declare-fun P_22 () Int)
(declare-fun P_23 () Int)
(declare-fun P_24 () Int)
(declare-fun P_25 () Int)
(declare-fun P_26 () Int)
(declare-fun P_27 () Int)
(declare-fun P_28 () Int)
(declare-fun P_29 () Int)
(declare-fun P_30 () Int)
(declare-fun P_31 () Int)
(declare-fun P_33 () Int)
(assert (<= 0 P_2))
(assert (<= P_2 3))
(assert (<= 0 P_3))
(assert (<= P_3 255))
(assert (<= 0 P_5))
(assert (<= P_5 255))
(assert (<= 0 P_6))
(assert (<= P_6 255))
(assert (<= 0 P_7))
(assert (<= P_7 255))
(assert (<= 0 P_8))
(assert (<= P_8 255))
(assert (<= 0 P_9))
(assert (<= P_9 255))
(assert (<= 0 P_10))
(assert (<= P_10 255))
(assert (<= 0 P_11))
(assert (<= P_11 255))
(assert (<= 0 P_12))
(assert (<= P_12 255))
(assert (<= 0 P_13))
(assert (<= P_13 255))
(assert (<= 0 P_14))
(assert (<= P_14 3))
(assert (<= 0 P_15))
(assert (<= P_15 255))
(assert (<= 0 P_16))
(assert (<= P_16 255))
(assert (<= 0 P_17))
(assert (<= P_17 255))
(assert (<= 0 P_18))
(assert (<= P_18 255))
(assert (<= 0 P_19))
(assert (<= P_19 255))
(assert (<= 0 P_20))
(assert (<= P_20 255))
(assert (<= 0 P_21))
(assert (<= P_21 3))
(assert (<= 0 P_22))
(assert (<= P_22 255))
(assert (<= 0 P_23))
(assert (<= P_23 255))
(assert (<= 0 P_24))
(assert (<= P_24 255))
(assert (<= 0 P_25))
(assert (<= P_25 255))
(assert (<= 0 P_26))
(assert (<= P_26 255))
(assert (<= 0 P_27))
(assert (<= P_27 255))
(assert (<= 0 P_28))
(assert (<= P_28 255))
(assert (<= 0 P_29))
(assert (<= P_29 255))
(assert (<= 0 P_30))
(assert (<= P_30 3))
(assert (<= 0 P_31))
(assert (<= P_31 255))
(assert (<= 0 P_33))
(assert (<= P_33 255))
(declare-fun dz () Int)
(declare-fun rz () Int)
(assert (let ((?v_1 (not P_4))) (let ((?v_3 (* (ite ?v_1 (- P_5 P_6) P_7) (ite ?v_1 P_8 P_9))) (?v_5 (* P_7 P_9)) (?v_15 (+ P_12 P_13)) (?v_9 (= P_14 2)) (?v_8 (= P_14 1)) (?v_7 (= P_14 0))) (let ((?v_11 (ite ?v_7 ?v_5 (ite ?v_8 ?v_5 (ite ?v_9 ?v_15 P_15)))) (?v_4 (= P_2 2)) (?v_2 (= P_2 1)) (?v_0 (= P_2 0)) (?v_6 (ite ?v_1 (* P_11 P_16) P_17)) (?v_12 (ite ?v_7 P_17 (ite ?v_8 P_17 (ite ?v_9 P_19 P_20))))) (let ((?v_10 (+ (ite ?v_0 ?v_3 (ite ?v_2 ?v_3 (ite ?v_4 (+ (ite ?v_1 (- P_10 P_11) P_12) (ite ?v_1 (* P_10 P_8) P_13)) ?v_11))) (ite ?v_0 ?v_6 (ite ?v_2 ?v_6 (ite ?v_4 (ite ?v_1 P_18 P_19) ?v_12))))) (?v_13 (+ ?v_11 ?v_12)) (?v_14 (+ P_15 P_20)) (?v_20 (= P_21 2)) (?v_18 (= P_21 1)) (?v_17 (= P_21 0))) (let ((?v_24 (ite ?v_17 ?v_14 (ite ?v_18 ?v_14 (ite ?v_20 ?v_14 P_22))))) (let ((?v_22 (ite ?v_7 ?v_13 (ite ?v_8 ?v_13 (ite ?v_9 ?v_13 ?v_24))))) (let ((?v_25 (ite ?v_0 ?v_10 (ite ?v_2 ?v_10 (ite ?v_4 ?v_10 ?v_22)))) (?v_16 (+ (ite ?v_7 ?v_15 (ite ?v_8 ?v_15 (ite ?v_9 ?v_5 P_23))) (ite ?v_7 P_19 (ite ?v_8 P_19 (ite ?v_9 P_17 P_24))))) (?v_19 (+ P_23 P_24))) (let ((?v_23 (ite ?v_17 ?v_19 (ite ?v_18 ?v_19 (ite ?v_20 (+ P_26 P_28) P_29))))) (let ((?v_21 (ite ?v_7 ?v_16 (ite ?v_8 ?v_16 (ite ?v_9 (+ (ite ?v_7 P_25 (ite ?v_8 P_25 (ite ?v_9 P_25 P_26))) (ite ?v_7 P_27 (ite ?v_8 P_27 (ite ?v_9 P_27 P_28)))) ?v_23)))) (?v_28 (= P_30 2)) (?v_27 (= P_30 1)) (?v_26 (= P_30 0))) (= (+ (* 256 dz) rz) (- (ite ?v_0 P_3 (ite ?v_2 P_3 (ite ?v_4 ?v_25 (ite ?v_7 ?v_21 (ite ?v_8 ?v_21 (ite ?v_9 ?v_22 (ite ?v_17 ?v_23 (ite ?v_18 ?v_23 (ite ?v_20 ?v_24 (ite ?v_26 P_29 (ite ?v_27 P_29 (ite ?v_28 P_22 P_33)))))))))))) (ite ?v_0 P_3 (ite ?v_2 P_3 (ite ?v_4 ?v_25 (ite ?v_7 ?v_21 (ite ?v_8 ?v_21 (ite ?v_9 ?v_22 (ite ?v_17 ?v_23 (ite ?v_18 ?v_23 (ite ?v_20 ?v_24 (ite ?v_26 P_29 (ite ?v_27 P_29 (ite ?v_28 P_22 P_31))))))))))))))))))))))))
(assert (> rz 0))
(assert (< rz 256))
(check-sat)
(exit)
