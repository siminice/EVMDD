(set-logic QF_NIA)
(set-info :source |
    Sequential equivalence checking.
    Calypto Design Systems, Inc. <www.calypto.com>
  |)
(set-info :smt-lib-version 2.0)
(set-info :category "industrial")
(set-info :status sat)
(declare-fun P_2 () Bool)
(declare-fun P_3 () Int)
(declare-fun P_4 () Bool)
(declare-fun P_5 () Int)
(declare-fun P_6 () Int)
(declare-fun P_7 () Int)
(assert (<= 0 P_3))
(assert (<= P_3 127))
(assert (<= 0 P_5))
(assert (<= P_5 127))
(assert (<= 0 P_6))
(assert (<= P_6 255))
(assert (<= 0 P_7))
(assert (<= P_7 255))
(declare-fun dz () Int)
(declare-fun rz () Int)
(assert (let ((?v_2 (* P_3 P_5)) (?v_1 (- P_3 P_5)) (?v_0 (not (and (= (+ (ite P_2 128 0) P_3) 238) (= (+ (ite P_4 128 0) P_5) 17))))) (let ((?v_3 (ite ?v_0 ?v_1 ?v_2))) (= (+ (* 128 dz) rz) (- (ite (not (not (and (= P_6 238) (= P_7 17)))) (ite ?v_0 ?v_2 ?v_1) ?v_3) ?v_3)))))
(assert (> rz 0))
(assert (< rz 128))
(check-sat)
(exit)
