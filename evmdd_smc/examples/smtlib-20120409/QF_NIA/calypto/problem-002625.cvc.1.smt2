(set-logic QF_NIA)
(set-info :source |
    Sequential equivalence checking.
    Calypto Design Systems, Inc. <www.calypto.com>
  |)
(set-info :smt-lib-version 2.0)
(set-info :category "industrial")
(set-info :status sat)
(declare-fun P_2 () Bool)
(declare-fun P_3 () Bool)
(declare-fun P_4 () Bool)
(declare-fun P_5 () Bool)
(declare-fun P_6 () Int)
(declare-fun P_7 () Bool)
(declare-fun P_8 () Int)
(declare-fun P_9 () Int)
(declare-fun P_10 () Bool)
(declare-fun P_11 () Bool)
(declare-fun P_12 () Bool)
(declare-fun P_13 () Bool)
(declare-fun P_14 () Bool)
(declare-fun P_15 () Bool)
(declare-fun P_16 () Bool)
(declare-fun P_17 () Bool)
(declare-fun P_18 () Bool)
(declare-fun P_19 () Bool)
(declare-fun P_20 () Bool)
(declare-fun P_21 () Bool)
(declare-fun P_22 () Bool)
(declare-fun P_23 () Bool)
(declare-fun P_24 () Bool)
(declare-fun P_25 () Bool)
(declare-fun P_26 () Int)
(declare-fun P_27 () Int)
(assert (<= (* 256 (- 1)) P_6))
(assert (<= P_6 255))
(assert (<= 0 P_8))
(assert (<= P_8 1023))
(assert (<= 0 P_9))
(assert (<= P_9 3))
(assert (<= 0 P_26))
(assert (<= P_26 127))
(assert (<= 0 P_27))
(assert (<= P_27 127))
(declare-fun dz () Int)
(declare-fun rz () Int)
(assert (let ((?v_0 (not P_4))) (let ((?v_2 (not (or (or P_2 P_3) (not (ite ?v_0 P_5 false))))) (?v_4 (* P_9 256)) (?v_3 (not P_7))) (let ((?v_1 (ite ?v_3 P_8 (+ ?v_4 P_27))) (?v_5 (ite ?v_3 P_8 (+ ?v_4 (ite (not (not (and (not P_10) (and (not P_11) (and (not P_12) (and (not P_13) (and (not P_14) (and (not P_15) (and (not P_16) (and (not P_17) (and (not P_18) (and (not P_19) (and (not P_20) (and (not P_21) (and (not P_22) (and (not P_23) (and (not P_24) (not P_25)))))))))))))))))) P_26 P_27))))) (= (+ (* 524288 dz) rz) (- (ite (not ?v_2) 0 (ite ?v_0 (* P_6 (ite (< ?v_1 512) ?v_1 (- ?v_1 1024))) 0)) (ite ?v_2 (* P_6 (ite (< ?v_5 512) ?v_5 (- ?v_5 1024))) 0)))))))
(assert (> rz 0))
(assert (< rz 524288))
(check-sat)
(exit)
