(set-logic QF_NIA)
(set-info :source |
    Sequential equivalence checking.
    Calypto Design Systems, Inc. <www.calypto.com>
  |)
(set-info :smt-lib-version 2.0)
(set-info :category "industrial")
(set-info :status sat)
(declare-fun P_2 () Int)
(declare-fun P_3 () Int)
(declare-fun P_4 () Bool)
(declare-fun P_5 () Bool)
(declare-fun P_6 () Int)
(declare-fun P_7 () Int)
(declare-fun P_8 () Bool)
(declare-fun P_9 () Bool)
(assert (<= 0 P_2))
(assert (<= P_2 15))
(assert (<= 0 P_3))
(assert (<= P_3 3))
(assert (<= 0 P_6))
(assert (<= P_6 15))
(assert (<= 0 P_7))
(assert (<= P_7 3))
(declare-fun dz () Int)
(declare-fun rz () Int)
(assert (let ((?v_0 (< (ite (< P_2 8) P_2 (- P_2 16)) 0)) (?v_1 (< (ite (< P_3 2) P_3 (- P_3 4)) 0))) (let ((?v_2 (ite (not (or (and (not ?v_0) (or ?v_1 P_4)) (and ?v_0 (or (not ?v_1) P_5)))) (* P_3 16) 0)) (?v_3 (< (ite (< P_6 8) P_6 (- P_6 16)) 0)) (?v_4 (< (ite (< P_7 2) P_7 (- P_7 4)) 0))) (let ((?v_5 (ite (not (or (and (not ?v_3) (or ?v_4 P_8)) (and ?v_3 (or (not ?v_4) P_9)))) (* P_7 16) 0))) (let ((?v_6 (* (ite (< ?v_2 32) ?v_2 (- ?v_2 64)) (ite (< ?v_5 32) ?v_5 (- ?v_5 64))))) (= (+ (* 4294967296 dz) rz) (- ?v_6 (ite (>= ?v_6 0) ?v_6 (+ ?v_6 4096)))))))))
(assert (> rz 0))
(assert (< rz 4294967296))
(check-sat)
(exit)
