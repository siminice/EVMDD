(set-logic QF_NIA)
(set-info :source |
    Sequential equivalence checking.
    Calypto Design Systems, Inc. <www.calypto.com>
  |)
(set-info :smt-lib-version 2.0)
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun P_2 () Bool)
(declare-fun P_3 () Bool)
(declare-fun P_4 () Int)
(declare-fun P_5 () Int)
(declare-fun P_6 () Int)
(declare-fun P_7 () Bool)
(declare-fun P_8 () Bool)
(declare-fun P_9 () Int)
(declare-fun P_10 () Int)
(assert (<= 0 P_4))
(assert (<= P_4 255))
(assert (<= 0 P_5))
(assert (<= P_5 255))
(assert (<= 0 P_6))
(assert (<= P_6 255))
(assert (<= 0 P_9))
(assert (<= P_9 255))
(assert (<= 0 P_10))
(assert (<= P_10 255))
(declare-fun dz () Int)
(declare-fun rz () Int)
(assert (let ((?v_0 (ite (not (or (not P_7) P_8)) P_9 P_10)) (?v_2 (* P_4 (+ P_5 P_6))) (?v_1 (not P_2))) (= (+ (* 256 dz) rz) (- (ite (not P_3) (ite ?v_1 ?v_0 ?v_2) ?v_0) (ite (not (or ?v_1 P_3)) ?v_2 ?v_0)))))
(assert (> rz 0))
(assert (< rz 256))
(check-sat)
(exit)
