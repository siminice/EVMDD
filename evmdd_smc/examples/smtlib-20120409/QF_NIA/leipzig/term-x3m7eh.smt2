(set-logic QF_NIA)
(set-info :source |
     Constraint systems stating that a matrix interpretation is
     compatible with a rewriting system (weakly compatible with
     all rules, strictly compatible with at least one).

     Contributed by Johannes Waldmann at HTKW Leipzig.
   |)
(set-info :smt-lib-version 2.0)
(set-info :category "crafted")
(set-info :status sat)
(declare-fun n0 () Int)
(assert (>= n0 0))
(declare-fun n1 () Int)
(assert (>= n1 0))
(declare-fun n2 () Int)
(assert (>= n2 0))
(declare-fun n3 () Int)
(assert (>= n3 0))
(declare-fun n4 () Int)
(assert (>= n4 0))
(declare-fun n5 () Int)
(assert (>= n5 0))
(declare-fun n6 () Int)
(assert (>= n6 0))
(declare-fun n7 () Int)
(assert (>= n7 0))
(declare-fun n8 () Int)
(assert (>= n8 0))
(declare-fun n9 () Int)
(assert (>= n9 0))
(declare-fun n10 () Int)
(assert (>= n10 0))
(declare-fun n11 () Int)
(assert (>= n11 0))
(declare-fun n12 () Int)
(assert (>= n12 0))
(declare-fun n13 () Int)
(assert (>= n13 0))
(declare-fun n14 () Int)
(assert (>= n14 0))
(declare-fun n15 () Int)
(assert (>= n15 0))
(declare-fun n16 () Int)
(assert (= n16 (* n11 n10)))
(declare-fun n17 () Int)
(assert (= n17 (+ n10 n16)))
(declare-fun n18 () Int)
(assert (= n18 (* n11 n11)))
(declare-fun n19 () Int)
(assert (= n19 (* n13 n14)))
(declare-fun n20 () Int)
(assert (= n20 (+ n12 n19)))
(declare-fun n21 () Int)
(assert (= n21 (* n13 n15)))
(declare-fun n22 () Int)
(assert (= n22 (* n15 n12)))
(declare-fun n23 () Int)
(assert (= n23 (+ n14 n22)))
(declare-fun n24 () Int)
(assert (= n24 (* n15 n13)))
(declare-fun n25 () Int)
(assert (= n25 (* n3 n20)))
(declare-fun n26 () Int)
(assert (= n26 (+ n2 n25)))
(declare-fun n27 () Int)
(assert (= n27 (* n3 n21)))
(declare-fun n28 () Int)
(assert (= n28 (* n5 n17)))
(declare-fun n29 () Int)
(assert (= n29 (+ n4 n28)))
(declare-fun n30 () Int)
(assert (= n30 (* n5 n18)))
(declare-fun n31 () Int)
(assert (= n31 (* n7 n23)))
(declare-fun n32 () Int)
(assert (= n32 (+ n6 n31)))
(declare-fun n33 () Int)
(assert (= n33 (* n7 n24)))
(declare-fun n34 () Int)
(assert (= n34 (* n11 n12)))
(declare-fun n35 () Int)
(assert (= n35 (+ n10 n34)))
(declare-fun n36 () Int)
(assert (= n36 (* n11 n13)))
(declare-fun n37 () Int)
(assert (= n37 (* n18 n12)))
(declare-fun n38 () Int)
(assert (= n38 (+ n17 n37)))
(declare-fun n39 () Int)
(assert (= n39 (* n18 n13)))
(declare-fun n40 () Int)
(assert (= n40 (* n15 n14)))
(declare-fun n41 () Int)
(assert (= n41 (+ n14 n40)))
(declare-fun n42 () Int)
(assert (= n42 (* n15 n15)))
(declare-fun n43 () Int)
(assert (= n43 (* n3 n35)))
(declare-fun n44 () Int)
(assert (= n44 (+ n2 n43)))
(declare-fun n45 () Int)
(assert (= n45 (* n3 n36)))
(declare-fun n46 () Int)
(assert (= n46 (* n3 n12)))
(declare-fun n47 () Int)
(assert (= n47 (+ n2 n46)))
(declare-fun n48 () Int)
(assert (= n48 (* n3 n13)))
(declare-fun n49 () Int)
(assert (= n49 (* n5 n12)))
(declare-fun n50 () Int)
(assert (= n50 (+ n4 n49)))
(declare-fun n51 () Int)
(assert (= n51 (* n5 n13)))
(declare-fun n52 () Int)
(assert (= n52 (* n7 n14)))
(declare-fun n53 () Int)
(assert (= n53 (+ n6 n52)))
(declare-fun n54 () Int)
(assert (= n54 (* n7 n15)))
(declare-fun n55 () Int)
(assert (= n55 (* n7 n12)))
(declare-fun n56 () Int)
(assert (= n56 (+ n6 n55)))
(declare-fun n57 () Int)
(assert (= n57 (* n7 n13)))
(assert (>= n0 n44))
(assert (>= n1 n45))
(assert (>= n0 n47))
(assert (>= n1 n48))
(assert (>= n0 n4))
(assert (>= n1 n5))
(assert (>= n50 n53))
(assert (>= n51 n54))
(assert (>= n50 n6))
(assert (>= n51 n7))
(assert (>= n29 n44))
(assert (>= n30 n45))
(assert (>= n29 n47))
(assert (>= n30 n48))
(assert (>= n29 n4))
(assert (>= n30 n5))
(declare-fun n58 () Int)
(assert (= n58 (* n57 n10)))
(declare-fun n59 () Int)
(assert (= n59 (+ n56 n58)))
(declare-fun n60 () Int)
(assert (= n60 (* n57 n11)))
(assert (>= n26 n59))
(assert (>= n27 n60))
(declare-fun n61 () Int)
(assert (= n61 (* n5 n10)))
(declare-fun n62 () Int)
(assert (= n62 (+ n4 n61)))
(declare-fun n63 () Int)
(assert (= n63 (* n5 n11)))
(assert (>= n26 n62))
(assert (>= n27 n63))
(assert (>= n26 n2))
(assert (>= n27 n3))
(declare-fun n64 () Int)
(assert (= n64 (* n5 n41)))
(declare-fun n65 () Int)
(assert (= n65 (+ n4 n64)))
(declare-fun n66 () Int)
(assert (= n66 (* n5 n42)))
(assert (>= n32 n65))
(assert (>= n33 n66))
(assert (>= n32 n53))
(assert (>= n33 n54))
(assert (>= n32 n6))
(assert (>= n33 n7))
(assert (>= n8 n38))
(assert (>= n9 n39))
(declare-fun n67 () Int)
(assert (= n67 (* n13 n12)))
(declare-fun n68 () Int)
(assert (= n68 (+ n12 n67)))
(declare-fun n69 () Int)
(assert (= n69 (* n13 n13)))
(assert (>= n68 n41))
(assert (>= n69 n42))
(declare-fun n70 () Int)
(assert (= n70 (* n13 n17)))
(declare-fun n71 () Int)
(assert (= n71 (+ n12 n70)))
(declare-fun n72 () Int)
(assert (= n72 (* n13 n18)))
(assert (>= n71 n38))
(assert (>= n72 n39))
(declare-fun n73 () Int)
(assert (= n73 (* n11 n20)))
(declare-fun n74 () Int)
(assert (= n74 (+ n10 n73)))
(declare-fun n75 () Int)
(assert (= n75 (* n11 n21)))
(declare-fun n76 () Int)
(assert (= n76 (* n24 n10)))
(declare-fun n77 () Int)
(assert (= n77 (+ n23 n76)))
(declare-fun n78 () Int)
(assert (= n78 (* n24 n11)))
(assert (>= n74 n77))
(assert (>= n75 n78))
(declare-fun n79 () Int)
(assert (= n79 (* n15 n23)))
(declare-fun n80 () Int)
(assert (= n80 (+ n14 n79)))
(declare-fun n81 () Int)
(assert (= n81 (* n15 n24)))
(declare-fun n82 () Int)
(assert (= n82 (* n21 n14)))
(declare-fun n83 () Int)
(assert (= n83 (+ n20 n82)))
(declare-fun n84 () Int)
(assert (= n84 (* n21 n15)))
(assert (>= n80 n83))
(assert (>= n81 n84))
(declare-fun n85 () Int)
(assert (= n85 (* n15 n10)))
(declare-fun n86 () Int)
(assert (= n86 (+ n14 n85)))
(declare-fun n87 () Int)
(assert (= n87 (* n15 n11)))
(assert true)
(assert (>= n87 1))
(declare-fun n88 () Int)
(assert (= n88 (* n11 n14)))
(declare-fun n89 () Int)
(assert (= n89 (+ n10 n88)))
(declare-fun n90 () Int)
(assert (= n90 (* n11 n15)))
(assert true)
(assert (>= n90 1))
(declare-fun n91 () Int)
(assert (= n91 (* n13 n8)))
(declare-fun n92 () Int)
(assert (= n92 (+ n12 n91)))
(declare-fun n93 () Int)
(assert (= n93 (* n13 n9)))
(assert true)
(assert (>= n93 1))
(declare-fun n94 () Int)
(assert (= n94 (* n9 n12)))
(declare-fun n95 () Int)
(assert (= n95 (+ n8 n94)))
(declare-fun n96 () Int)
(assert (= n96 (* n9 n13)))
(assert true)
(assert (>= n96 1))
(assert (or (> n0 n44) (> n0 n47) (> n0 n4) (> n50 n53) (> n50 n6) (> n29 n44) (> n29 n47) (> n29 n4) (> n26 n59) (> n26 n62) (> n26 n2) (> n32 n65) (> n32 n53) (> n32 n6)))
(check-sat)
(exit)
