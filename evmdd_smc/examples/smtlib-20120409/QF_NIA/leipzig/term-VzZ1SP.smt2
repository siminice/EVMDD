(set-logic QF_NIA)
(set-info :source |
     Constraint systems stating that a matrix interpretation is
     compatible with a rewriting system (weakly compatible with
     all rules, strictly compatible with at least one).

     Contributed by Johannes Waldmann at HTKW Leipzig.
   |)
(set-info :smt-lib-version 2.0)
(set-info :category "crafted")
(set-info :status sat)
(declare-fun n0 () Int)
(assert (>= n0 0))
(declare-fun n1 () Int)
(assert (>= n1 0))
(declare-fun n2 () Int)
(assert (>= n2 0))
(declare-fun n3 () Int)
(assert (>= n3 0))
(declare-fun n4 () Int)
(assert (>= n4 0))
(declare-fun n5 () Int)
(assert (>= n5 0))
(declare-fun n6 () Int)
(assert (>= n6 0))
(declare-fun n7 () Int)
(assert (>= n7 0))
(declare-fun n8 () Int)
(assert (= n8 (* n7 n4)))
(declare-fun n9 () Int)
(assert (= n9 (+ n6 n8)))
(declare-fun n10 () Int)
(assert (= n10 (* n7 n5)))
(declare-fun n11 () Int)
(assert (= n11 (* n5 n6)))
(declare-fun n12 () Int)
(assert (= n12 (+ n4 n11)))
(declare-fun n13 () Int)
(assert (= n13 (* n5 n7)))
(declare-fun n14 () Int)
(assert (= n14 (* n10 n6)))
(declare-fun n15 () Int)
(assert (= n15 (+ n9 n14)))
(declare-fun n16 () Int)
(assert (= n16 (* n10 n7)))
(declare-fun n17 () Int)
(assert (= n17 (* n10 n12)))
(declare-fun n18 () Int)
(assert (= n18 (+ n9 n17)))
(declare-fun n19 () Int)
(assert (= n19 (* n10 n13)))
(declare-fun n20 () Int)
(assert (= n20 (* n5 n18)))
(declare-fun n21 () Int)
(assert (= n21 (+ n4 n20)))
(declare-fun n22 () Int)
(assert (= n22 (* n5 n19)))
(declare-fun n23 () Int)
(assert (= n23 (* n7 n15)))
(declare-fun n24 () Int)
(assert (= n24 (+ n6 n23)))
(declare-fun n25 () Int)
(assert (= n25 (* n7 n16)))
(declare-fun n26 () Int)
(assert (= n26 (* n10 n15)))
(declare-fun n27 () Int)
(assert (= n27 (+ n9 n26)))
(declare-fun n28 () Int)
(assert (= n28 (* n10 n16)))
(declare-fun n29 () Int)
(assert (= n29 (* n22 n6)))
(declare-fun n30 () Int)
(assert (= n30 (+ n21 n29)))
(declare-fun n31 () Int)
(assert (= n31 (* n22 n7)))
(declare-fun n32 () Int)
(assert (= n32 (* n22 n24)))
(declare-fun n33 () Int)
(assert (= n33 (+ n21 n32)))
(declare-fun n34 () Int)
(assert (= n34 (* n22 n25)))
(declare-fun n35 () Int)
(assert (= n35 (* n3 n4)))
(declare-fun n36 () Int)
(assert (= n36 (+ n2 n35)))
(declare-fun n37 () Int)
(assert (= n37 (* n3 n5)))
(declare-fun n38 () Int)
(assert (= n38 (* n3 n30)))
(declare-fun n39 () Int)
(assert (= n39 (+ n2 n38)))
(declare-fun n40 () Int)
(assert (= n40 (* n3 n31)))
(declare-fun n41 () Int)
(assert (= n41 (* n10 n18)))
(declare-fun n42 () Int)
(assert (= n42 (+ n9 n41)))
(declare-fun n43 () Int)
(assert (= n43 (* n10 n19)))
(declare-fun n44 () Int)
(assert (= n44 (* n37 n12)))
(declare-fun n45 () Int)
(assert (= n45 (+ n36 n44)))
(declare-fun n46 () Int)
(assert (= n46 (* n37 n13)))
(declare-fun n47 () Int)
(assert (= n47 (* n3 n12)))
(declare-fun n48 () Int)
(assert (= n48 (+ n2 n47)))
(declare-fun n49 () Int)
(assert (= n49 (* n3 n13)))
(declare-fun n50 () Int)
(assert (= n50 (* n49 n6)))
(declare-fun n51 () Int)
(assert (= n51 (+ n48 n50)))
(declare-fun n52 () Int)
(assert (= n52 (* n49 n7)))
(declare-fun n53 () Int)
(assert (= n53 (* n3 n27)))
(declare-fun n54 () Int)
(assert (= n54 (+ n2 n53)))
(declare-fun n55 () Int)
(assert (= n55 (* n3 n28)))
(assert (>= n51 n54))
(assert (>= n52 n55))
(declare-fun n56 () Int)
(assert (= n56 (* n37 n33)))
(declare-fun n57 () Int)
(assert (= n57 (+ n36 n56)))
(declare-fun n58 () Int)
(assert (= n58 (* n37 n34)))
(assert (>= n39 n57))
(assert (>= n40 n58))
(declare-fun n59 () Int)
(assert (= n59 (* n46 n24)))
(declare-fun n60 () Int)
(assert (= n60 (+ n45 n59)))
(declare-fun n61 () Int)
(assert (= n61 (* n46 n25)))
(assert (>= n39 n60))
(assert (>= n40 n61))
(declare-fun n62 () Int)
(assert (= n62 (* n7 n24)))
(declare-fun n63 () Int)
(assert (= n63 (+ n6 n62)))
(declare-fun n64 () Int)
(assert (= n64 (* n7 n25)))
(declare-fun n65 () Int)
(assert (= n65 (* n16 n15)))
(declare-fun n66 () Int)
(assert (= n66 (+ n15 n65)))
(declare-fun n67 () Int)
(assert (= n67 (* n16 n16)))
(assert (>= n63 n66))
(assert (>= n64 n67))
(declare-fun n68 () Int)
(assert (= n68 (* n16 n6)))
(declare-fun n69 () Int)
(assert (= n69 (+ n15 n68)))
(declare-fun n70 () Int)
(assert (= n70 (* n16 n7)))
(declare-fun n71 () Int)
(assert (= n71 (* n7 n27)))
(declare-fun n72 () Int)
(assert (= n72 (+ n6 n71)))
(declare-fun n73 () Int)
(assert (= n73 (* n7 n28)))
(assert (>= n69 n72))
(assert (>= n70 n73))
(declare-fun n74 () Int)
(assert (= n74 (* n43 n6)))
(declare-fun n75 () Int)
(assert (= n75 (+ n42 n74)))
(declare-fun n76 () Int)
(assert (= n76 (* n43 n7)))
(declare-fun n77 () Int)
(assert (= n77 (* n10 n33)))
(declare-fun n78 () Int)
(assert (= n78 (+ n9 n77)))
(declare-fun n79 () Int)
(assert (= n79 (* n10 n34)))
(assert (>= n75 n78))
(assert (>= n76 n79))
(assert (or (> n51 n54) (> n39 n57) (> n39 n60)))
(check-sat)
(exit)
