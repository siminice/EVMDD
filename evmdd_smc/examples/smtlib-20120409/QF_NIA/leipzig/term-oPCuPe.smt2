(set-logic QF_NIA)
(set-info :source |
     Constraint systems stating that a matrix interpretation is
     compatible with a rewriting system (weakly compatible with
     all rules, strictly compatible with at least one).

     Contributed by Johannes Waldmann at HTKW Leipzig.
   |)
(set-info :smt-lib-version 2.0)
(set-info :category "crafted")
(set-info :status sat)
(declare-fun n0 () Int)
(assert (>= n0 0))
(declare-fun n1 () Int)
(assert (>= n1 0))
(declare-fun n2 () Int)
(assert (>= n2 0))
(declare-fun n3 () Int)
(assert (>= n3 0))
(declare-fun n4 () Int)
(assert (>= n4 0))
(declare-fun n5 () Int)
(assert (>= n5 0))
(declare-fun n6 () Int)
(assert (>= n6 0))
(declare-fun n7 () Int)
(assert (>= n7 0))
(declare-fun n8 () Int)
(assert (>= n8 0))
(declare-fun n9 () Int)
(assert (>= n9 0))
(declare-fun n10 () Int)
(assert (>= n10 0))
(declare-fun n11 () Int)
(assert (>= n11 0))
(declare-fun n12 () Int)
(assert (>= n12 0))
(declare-fun n13 () Int)
(assert (>= n13 0))
(declare-fun n14 () Int)
(assert (>= n14 0))
(declare-fun n15 () Int)
(assert (>= n15 0))
(declare-fun n16 () Int)
(assert (>= n16 0))
(declare-fun n17 () Int)
(assert (>= n17 0))
(declare-fun n18 () Int)
(assert (>= n18 0))
(declare-fun n19 () Int)
(assert (>= n19 0))
(declare-fun n20 () Int)
(assert (>= n20 0))
(declare-fun n21 () Int)
(assert (>= n21 0))
(declare-fun n22 () Int)
(assert (>= n22 0))
(declare-fun n23 () Int)
(assert (>= n23 0))
(declare-fun n24 () Int)
(assert (>= n24 0))
(declare-fun n25 () Int)
(assert (>= n25 0))
(declare-fun n26 () Int)
(assert (>= n26 0))
(declare-fun n27 () Int)
(assert (>= n27 0))
(declare-fun n28 () Int)
(assert (= n28 (* n25 n20)))
(declare-fun n29 () Int)
(assert (= n29 (+ n24 n28)))
(declare-fun n30 () Int)
(assert (= n30 (* n25 n21)))
(declare-fun n31 () Int)
(assert (= n31 (* n27 n26)))
(declare-fun n32 () Int)
(assert (= n32 (+ n26 n31)))
(declare-fun n33 () Int)
(assert (= n33 (* n27 n27)))
(declare-fun n34 () Int)
(assert (= n34 (* n23 n22)))
(declare-fun n35 () Int)
(assert (= n35 (+ n22 n34)))
(declare-fun n36 () Int)
(assert (= n36 (* n23 n23)))
(declare-fun n37 () Int)
(assert (= n37 (* n25 n26)))
(declare-fun n38 () Int)
(assert (= n38 (+ n24 n37)))
(declare-fun n39 () Int)
(assert (= n39 (* n25 n27)))
(declare-fun n40 () Int)
(assert (= n40 (* n15 n32)))
(declare-fun n41 () Int)
(assert (= n41 (+ n14 n40)))
(declare-fun n42 () Int)
(assert (= n42 (* n15 n33)))
(declare-fun n43 () Int)
(assert (= n43 (* n33 n41)))
(declare-fun n44 () Int)
(assert (= n44 (+ n32 n43)))
(declare-fun n45 () Int)
(assert (= n45 (* n33 n42)))
(declare-fun n46 () Int)
(assert (= n46 (* n23 n26)))
(declare-fun n47 () Int)
(assert (= n47 (+ n22 n46)))
(declare-fun n48 () Int)
(assert (= n48 (* n23 n27)))
(declare-fun n49 () Int)
(assert (= n49 (* n9 n14)))
(declare-fun n50 () Int)
(assert (= n50 (+ n8 n49)))
(declare-fun n51 () Int)
(assert (= n51 (* n9 n15)))
(assert (>= n50 n8))
(assert (>= n51 n9))
(declare-fun n52 () Int)
(assert (= n52 (* n9 n32)))
(declare-fun n53 () Int)
(assert (= n53 (+ n8 n52)))
(declare-fun n54 () Int)
(assert (= n54 (* n9 n33)))
(declare-fun n55 () Int)
(assert (= n55 (* n9 n26)))
(declare-fun n56 () Int)
(assert (= n56 (+ n8 n55)))
(declare-fun n57 () Int)
(assert (= n57 (* n9 n27)))
(assert (>= n53 n56))
(assert (>= n54 n57))
(declare-fun n58 () Int)
(assert (= n58 (* n3 n26)))
(declare-fun n59 () Int)
(assert (= n59 (+ n2 n58)))
(declare-fun n60 () Int)
(assert (= n60 (* n3 n27)))
(declare-fun n61 () Int)
(assert (= n61 (* n5 n29)))
(declare-fun n62 () Int)
(assert (= n62 (+ n4 n61)))
(declare-fun n63 () Int)
(assert (= n63 (* n5 n30)))
(assert (>= n59 n62))
(assert (>= n60 n63))
(declare-fun n64 () Int)
(assert (= n64 (* n3 n35)))
(declare-fun n65 () Int)
(assert (= n65 (+ n2 n64)))
(declare-fun n66 () Int)
(assert (= n66 (* n3 n36)))
(assert (>= n4 n65))
(assert (>= n5 n66))
(declare-fun n67 () Int)
(assert (= n67 (* n9 n22)))
(declare-fun n68 () Int)
(assert (= n68 (+ n8 n67)))
(declare-fun n69 () Int)
(assert (= n69 (* n9 n23)))
(assert (>= n4 n68))
(assert (>= n5 n69))
(assert (>= n4 n8))
(assert (>= n5 n9))
(declare-fun n70 () Int)
(assert (= n70 (* n11 n20)))
(declare-fun n71 () Int)
(assert (= n71 (+ n10 n70)))
(declare-fun n72 () Int)
(assert (= n72 (* n11 n21)))
(declare-fun n73 () Int)
(assert (= n73 (* n11 n26)))
(declare-fun n74 () Int)
(assert (= n74 (+ n10 n73)))
(declare-fun n75 () Int)
(assert (= n75 (* n11 n27)))
(assert (>= n71 n74))
(assert (>= n72 n75))
(declare-fun n76 () Int)
(assert (= n76 (* n23 n14)))
(declare-fun n77 () Int)
(assert (= n77 (+ n22 n76)))
(declare-fun n78 () Int)
(assert (= n78 (* n23 n15)))
(declare-fun n79 () Int)
(assert (= n79 (* n45 n22)))
(declare-fun n80 () Int)
(assert (= n80 (+ n44 n79)))
(declare-fun n81 () Int)
(assert (= n81 (* n45 n23)))
(assert (>= n77 n80))
(assert (>= n78 n81))
(declare-fun n82 () Int)
(assert (= n82 (* n48 n14)))
(declare-fun n83 () Int)
(assert (= n83 (+ n47 n82)))
(declare-fun n84 () Int)
(assert (= n84 (* n48 n15)))
(assert (>= n83 n14))
(assert (>= n84 n15))
(declare-fun n85 () Int)
(assert (= n85 (* n23 n32)))
(declare-fun n86 () Int)
(assert (= n86 (+ n22 n85)))
(declare-fun n87 () Int)
(assert (= n87 (* n23 n33)))
(declare-fun n88 () Int)
(assert (= n88 (* n27 n47)))
(declare-fun n89 () Int)
(assert (= n89 (+ n26 n88)))
(declare-fun n90 () Int)
(assert (= n90 (* n27 n48)))
(assert (>= n86 n89))
(assert (>= n87 n90))
(declare-fun n91 () Int)
(assert (= n91 (* n17 n26)))
(declare-fun n92 () Int)
(assert (= n92 (+ n16 n91)))
(declare-fun n93 () Int)
(assert (= n93 (* n17 n27)))
(declare-fun n94 () Int)
(assert (= n94 (* n19 n29)))
(declare-fun n95 () Int)
(assert (= n95 (+ n18 n94)))
(declare-fun n96 () Int)
(assert (= n96 (* n19 n30)))
(assert (>= n92 n95))
(assert (>= n93 n96))
(declare-fun n97 () Int)
(assert (= n97 (* n17 n35)))
(declare-fun n98 () Int)
(assert (= n98 (+ n16 n97)))
(declare-fun n99 () Int)
(assert (= n99 (* n17 n36)))
(assert (>= n18 n98))
(assert (>= n19 n99))
(assert (>= n29 n38))
(assert (>= n30 n39))
(assert (>= n38 n32))
(assert (>= n39 n33))
(assert (>= n20 n26))
(assert (>= n21 n27))
(assert (or (> n50 n8) (> n53 n56) (> n59 n62) (> n4 n65) (> n4 n68) (> n4 n8) (> n71 n74)))
(check-sat)
(exit)
