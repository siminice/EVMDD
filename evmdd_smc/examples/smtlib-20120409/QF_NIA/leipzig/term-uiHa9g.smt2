(set-logic QF_NIA)
(set-info :source |
     Constraint systems stating that a matrix interpretation is
     compatible with a rewriting system (weakly compatible with
     all rules, strictly compatible with at least one).

     Contributed by Johannes Waldmann at HTKW Leipzig.
   |)
(set-info :smt-lib-version 2.0)
(set-info :category "crafted")
(set-info :status sat)
(declare-fun n0 () Int)
(assert (>= n0 0))
(declare-fun n1 () Int)
(assert (>= n1 0))
(declare-fun n2 () Int)
(assert (>= n2 0))
(declare-fun n3 () Int)
(assert (>= n3 0))
(declare-fun n4 () Int)
(assert (>= n4 0))
(declare-fun n5 () Int)
(assert (>= n5 0))
(assert (>= n2 1))
(declare-fun n6 () Int)
(assert (>= n6 0))
(declare-fun n7 () Int)
(assert (>= n7 0))
(declare-fun n8 () Int)
(assert (>= n8 0))
(declare-fun n9 () Int)
(assert (>= n9 0))
(declare-fun n10 () Int)
(assert (>= n10 0))
(declare-fun n11 () Int)
(assert (>= n11 0))
(assert (>= n8 1))
(declare-fun n12 () Int)
(assert (>= n12 0))
(declare-fun n13 () Int)
(assert (>= n13 0))
(declare-fun n14 () Int)
(assert (>= n14 0))
(declare-fun n15 () Int)
(assert (>= n15 0))
(declare-fun n16 () Int)
(assert (>= n16 0))
(declare-fun n17 () Int)
(assert (>= n17 0))
(assert (>= n14 1))
(declare-fun n18 () Int)
(assert (= n18 (* n14 n6)))
(declare-fun n19 () Int)
(assert (= n19 (* n15 n7)))
(declare-fun n20 () Int)
(assert (= n20 (* n16 n6)))
(declare-fun n21 () Int)
(assert (= n21 (* n17 n7)))
(declare-fun n22 () Int)
(assert (= n22 (+ n18 n19)))
(declare-fun n23 () Int)
(assert (= n23 (+ n20 n21)))
(declare-fun n24 () Int)
(assert (= n24 (+ n12 n22)))
(declare-fun n25 () Int)
(assert (= n25 (+ n13 n23)))
(declare-fun n26 () Int)
(assert (= n26 (* n14 n8)))
(declare-fun n27 () Int)
(assert (= n27 (* n15 n10)))
(declare-fun n28 () Int)
(assert (= n28 (* n14 n9)))
(declare-fun n29 () Int)
(assert (= n29 (* n15 n11)))
(declare-fun n30 () Int)
(assert (= n30 (* n16 n8)))
(declare-fun n31 () Int)
(assert (= n31 (* n17 n10)))
(declare-fun n32 () Int)
(assert (= n32 (* n16 n9)))
(declare-fun n33 () Int)
(assert (= n33 (* n17 n11)))
(declare-fun n34 () Int)
(assert (= n34 (+ n26 n27)))
(declare-fun n35 () Int)
(assert (= n35 (+ n28 n29)))
(declare-fun n36 () Int)
(assert (= n36 (+ n30 n31)))
(declare-fun n37 () Int)
(assert (= n37 (+ n32 n33)))
(declare-fun n38 () Int)
(assert (= n38 (* n8 n12)))
(declare-fun n39 () Int)
(assert (= n39 (* n9 n13)))
(declare-fun n40 () Int)
(assert (= n40 (* n10 n12)))
(declare-fun n41 () Int)
(assert (= n41 (* n11 n13)))
(declare-fun n42 () Int)
(assert (= n42 (+ n38 n39)))
(declare-fun n43 () Int)
(assert (= n43 (+ n40 n41)))
(declare-fun n44 () Int)
(assert (= n44 (+ n6 n42)))
(declare-fun n45 () Int)
(assert (= n45 (+ n7 n43)))
(declare-fun n46 () Int)
(assert (= n46 (* n8 n14)))
(declare-fun n47 () Int)
(assert (= n47 (* n9 n16)))
(declare-fun n48 () Int)
(assert (= n48 (* n8 n15)))
(declare-fun n49 () Int)
(assert (= n49 (* n9 n17)))
(declare-fun n50 () Int)
(assert (= n50 (* n10 n14)))
(declare-fun n51 () Int)
(assert (= n51 (* n11 n16)))
(declare-fun n52 () Int)
(assert (= n52 (* n10 n15)))
(declare-fun n53 () Int)
(assert (= n53 (* n11 n17)))
(declare-fun n54 () Int)
(assert (= n54 (+ n46 n47)))
(declare-fun n55 () Int)
(assert (= n55 (+ n48 n49)))
(declare-fun n56 () Int)
(assert (= n56 (+ n50 n51)))
(declare-fun n57 () Int)
(assert (= n57 (+ n52 n53)))
(declare-fun n58 () Int)
(assert (= n58 (* n34 n6)))
(declare-fun n59 () Int)
(assert (= n59 (* n35 n7)))
(declare-fun n60 () Int)
(assert (= n60 (* n36 n6)))
(declare-fun n61 () Int)
(assert (= n61 (* n37 n7)))
(declare-fun n62 () Int)
(assert (= n62 (+ n58 n59)))
(declare-fun n63 () Int)
(assert (= n63 (+ n60 n61)))
(declare-fun n64 () Int)
(assert (= n64 (+ n24 n62)))
(declare-fun n65 () Int)
(assert (= n65 (+ n25 n63)))
(declare-fun n66 () Int)
(assert (= n66 (* n34 n8)))
(declare-fun n67 () Int)
(assert (= n67 (* n35 n10)))
(declare-fun n68 () Int)
(assert (= n68 (* n34 n9)))
(declare-fun n69 () Int)
(assert (= n69 (* n35 n11)))
(declare-fun n70 () Int)
(assert (= n70 (* n36 n8)))
(declare-fun n71 () Int)
(assert (= n71 (* n37 n10)))
(declare-fun n72 () Int)
(assert (= n72 (* n36 n9)))
(declare-fun n73 () Int)
(assert (= n73 (* n37 n11)))
(declare-fun n74 () Int)
(assert (= n74 (+ n66 n67)))
(declare-fun n75 () Int)
(assert (= n75 (+ n68 n69)))
(declare-fun n76 () Int)
(assert (= n76 (+ n70 n71)))
(declare-fun n77 () Int)
(assert (= n77 (+ n72 n73)))
(assert (>= n44 n64))
(assert (>= n45 n65))
(assert (>= n54 n74))
(assert (>= n55 n75))
(assert (>= n56 n76))
(assert (>= n57 n77))
(assert (> n44 n64))
(check-sat)
(exit)
